<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ox333333</title>
  
  <subtitle>In Pursuit of Absolute Simplicity</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zpjiang.me/"/>
  <updated>2021-05-21T06:49:07.985Z</updated>
  <id>http://zpjiang.me/</id>
  
  <author>
    <name>Ox333333</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Bye Google! Hey Uber!</title>
    <link href="http://zpjiang.me/2021/05/20/bye-google/"/>
    <id>http://zpjiang.me/2021/05/20/bye-google/</id>
    <published>2021-05-20T19:00:00.000Z</published>
    <updated>2021-05-21T06:49:07.985Z</updated>
    
    <content type="html"><![CDATA[<p>3 years and 5 months, it’s time to move on!</p><p>I’m so grateful I had the privelege to work so many smart and nice people in Google, this is the place where I grew into a leader and learned how to manage projects and people.</p><p>The reason I’m leaving has nothing to do with YouTube TV, nor the company, I’m very proud of the product and features that we developed and shipped, I would strongly recommend Google to my friends because it’s the best place to work, especially for engineers.</p><p><img src="https://imgur.com/5Nn9JMV.jpg" alt="Google Badge and Laptop"></p><span id="more"></span><p>I’m joining Uber to start the new chapter, where I will be leading the Uber Maps Routing API team as the TLM.</p><p>TBH, a bit nervous, but I’m super excited as well.</p><p>Let’s see how it goes.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;3 years and 5 months, it’s time to move on!&lt;/p&gt;
&lt;p&gt;I’m so grateful I had the privelege to work so many smart and nice people in Google, this is the place where I grew into a leader and learned how to manage projects and people.&lt;/p&gt;
&lt;p&gt;The reason I’m leaving has nothing to do with YouTube TV, nor the company, I’m very proud of the product and features that we developed and shipped, I would strongly recommend Google to my friends because it’s the best place to work, especially for engineers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgur.com/5Nn9JMV.jpg&quot; alt=&quot;Google Badge and Laptop&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Work" scheme="http://zpjiang.me/tags/Work/"/>
    
  </entry>
  
  <entry>
    <title>Adjust Raspberry Pi camera focus to fix the blurry issue</title>
    <link href="http://zpjiang.me/2020/05/28/picamera-adjust-focus/"/>
    <id>http://zpjiang.me/2020/05/28/picamera-adjust-focus/</id>
    <published>2020-05-28T19:00:00.000Z</published>
    <updated>2021-05-21T05:52:47.920Z</updated>
    
    <content type="html"><![CDATA[<script>MathJax = { tex: { tags: 'all' } };</script><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_picamera2.jpeg" alt="Raspberry Pi Camera"></p><p>Device: <a href="https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/">Raspberry Pi 3 B+</a><br>Camera: <a href="https://www.raspberrypi.org/products/camera-module-v2/">Raspberry Pi Camera v2.1</a></p><p>I tried to use a Raspberry Pi to shoot a timelapse, to record the growth of my baby tangerine.</p><p>However, after checking the first pilot, the tangerine plant is pretty blurry, the camera was focusing on somewhere far away but not the plant, like the floor in the background is clear. </p><span id="more"></span><p>I don’t expect the camera to be smart enough to auto-focus on an object for the price that I paid, but I’m wondering if there’s anything that we can tweak to improve it.</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_baby_tangerine.png" alt="Baby tangerine under Raspberry Pi Camera"></p><h2 id="How-to-adjust-Raspberry-Pi-Camera’s-focus"><a href="#How-to-adjust-Raspberry-Pi-Camera’s-focus" class="headerlink" title="How to adjust Raspberry Pi Camera’s focus?"></a>How to adjust Raspberry Pi Camera’s focus?</h2><p>The standard Pi Camera is a fixed-focus lens, it’s not like a <a href="https://en.wikipedia.org/wiki/Zoom_lens">zoom lens</a>. However, the lens base is like a screw in a nut. You can <strong>adjust the lens focus by tightening or loosening the lens base</strong>, amazing! </p><p>There are some <a href="https://projects.raspberrypi.org/en/projects/infrared-bird-box/6">posts</a> talking about it. What surprises me is people are so smart that they can find the workaround, it doesn’t look like an official solution by design.</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_picamera.jpeg" alt="Raspberry Pi Camera Lens Base"></p><p>If you look closer at the double arrow, you can use a small tweezer to rotate it.</p><h2 id="How-does-it-work"><a href="#How-does-it-work" class="headerlink" title="How does it work?"></a>How does it work?</h2><p>To simplify the structure, here’s the sketch of the camera. The sensor is at the bottom, the lens is on top. When you rotate the lens base, the height is changed, which then changes the internal lens position so that it can focus on a different distance.</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_picamera_diagram.png" alt="Raspberry Pi Camera Sketch"></p><p>Now let’s see how different lens positions can change the focus position. </p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_picamera_diagram2.png" alt="Raspberry Pi Camera Sketch"></p><ul><li><code>v</code>: the image distance, between sensor and lens</li><li><code>u</code>: the object distance, between lens and object</li></ul><p>In the above two cases, when you tighten the lens base clockwise, <code>v</code> decreases, vice versa. When the lens base moves to the left, the focus point moves too, <strong>but in a different direction</strong>. So in my case, if I want to move the focus point from floor to my plant, I should actually increase <code>v</code>, to rotate the camera base out a little bit.</p><p>Why?</p><p>Let’s look at the <a href="http://hyperphysics.phy-astr.gsu.edu/hbase/geoopt/lenseq.html">Lens Formula</a>:</p><p>$${1 \over v} + {1 \over u} = {1 \over f}$$</p><p>The <code>f</code> is the focal length, it’s a constant value that determined by the lens. So, the right side of the equation is a constant, if you increase <code>v</code>, <code>1/v</code> becomes smaller, <code>1/u</code> increases, then <code>u</code> actually drops. That means, <code>v</code> is in inverse proportion to <code>u</code>.</p><p>Back to the plant, if we want to move the focus point closer, decreasing <code>u</code> require us to increase <code>v</code>, so we need to rotate the lens base out. Voila!</p><h2 id="Tune-It"><a href="#Tune-It" class="headerlink" title="Tune It!"></a>Tune It!</h2><p>Let’s start the experiment.</p><p>To facilitate the tuning process, I’d suggest rotating it clockwise to the end (minimize the <code>v</code>), then rotate it back (anti-clockwise) gradually to increase <code>v</code>. For two reasons:</p><ul><li>If we start by rotating anti-clockwise, the lens base can pop out, it’s not easy to put it back</li><li>Use the minimum <code>v</code> as a benchmark, keep each rotation step small, so that we won’t skip the best position</li></ul><p>After each small rotation, take a photo to check what’s the current focus, you can use the following command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use a different file name so that you can keep the history.</span></span><br><span class="line">raspistill -o test.jpg</span><br></pre></td></tr></table></figure><p>Here’s what I tried:</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_picamera_tuning1.jpg" alt="Raspberry Pi Camera Tuning"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_picamera_tuning2.jpg" alt="Raspberry Pi Camera Tuning"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_picamera_tuning3.jpg" alt="Raspberry Pi Camera Tuning"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_picamera_tuning4.jpg" alt="Raspberry Pi Camera Tuning"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_picamera_tuning5.jpg" alt="Raspberry Pi Camera Tuning"></p><p>Yay! The text on the keyboard becomes clear gradually after a few steps.</p><h2 id="Pay-Attention"><a href="#Pay-Attention" class="headerlink" title="Pay Attention"></a>Pay Attention</h2><ul><li>Be gentle, don’t screw it too hard</li><li>If you are using a tool like knife, be careful not to hurt yourself</li><li>When you screw anti-clockwise, don’t rotate too far, the lens base will pop out, it’s not that easy to put it back</li><li>Some people suggest to do it with the camera unplugged, well, I did it with it connected, so <strong>maybe</strong> it’s OK</li></ul><p><strong><em>Special thanks to Dr. Hu’s equation, that’s the basis of the experiment.</em></strong></p>]]></content>
    
    <summary type="html">
    
      The image taken by Raspberry Pi camera is blurry because the default focus point is too far, this can be fixed by adjusting the lens position.
    
    </summary>
    
    
      <category term="Raspberry Pi" scheme="http://zpjiang.me/tags/Raspberry-Pi/"/>
    
  </entry>
  
  <entry>
    <title>Return Value Optimization disabled for static variable</title>
    <link href="http://zpjiang.me/2020/03/14/rvo-static-variable/"/>
    <id>http://zpjiang.me/2020/03/14/rvo-static-variable/</id>
    <published>2020-03-14T19:00:00.000Z</published>
    <updated>2021-05-21T05:52:47.920Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>If a function returns a static variable, there won’t be any return value optimization (RVO), as static variable is allocated for the lifetime of the program, it can’t be moved.</p><span id="more"></span><h2 id="What-are-RVO-amp-Copy-Elision"><a href="#What-are-RVO-amp-Copy-Elision" class="headerlink" title="What are RVO &amp; Copy Elision?"></a>What are RVO &amp; Copy Elision?</h2><blockquote><p>In C++ computer programming, copy elision refers to a compiler optimization technique that eliminates unnecessary copying of objects.<br>…<br>Return value optimization (RVO) is a compiler optimization that involves eliminating the temporary object created to hold a function’s return value.</p><p style="text-align: right;"><em>from</em> <a href="https://en.wikipedia.org/wiki/Copy_elision">Wikipedia</a></p></blockquote><p>With the help of RVO and copy elision, it saves the object copy operation (sometimes it could be very expensive on large object) by moving the source object to the new one. More details can be found from <a href="https://zpjiang.me/2018/08/01/Copy-Elision-in-C/">Copy Elision and Return Value Optimization in C++</a>.</p><p>There are two cases where copy elision could be applied:</p><ul><li>returning a local variable inside a function</li><li>initializing a variable with a temporary value</li></ul><h2 id="Static-variable"><a href="#Static-variable" class="headerlink" title="Static variable"></a>Static variable</h2><p>A static variable is allocated only once in a program lifetime in static storage area. They have a scope till the program lifetime.</p><p>When a variable is declared as static in a function, space for it gets allocated for the lifetime of the <strong>program</strong>, not the function. Even if the function is called multiple times, space for the static variable is allocated only once and the value of variable in the previous call gets carried through the next function call.</p><h2 id="RVO-doesn’t-work-for-static-variable"><a href="#RVO-doesn’t-work-for-static-variable" class="headerlink" title="RVO doesn’t work for static variable"></a>RVO doesn’t work for static variable</h2><p>As static variable has the lifetime of the program, it can’t be moved when the function exits, hence RVO won’t be triggered and copy constructor will be called.</p><p>Here’s an example, we define a class <code>Point</code>, explicitly declare its normal constructor and copy construction to tell the difference.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// Normal constructor.</span></span><br><span class="line">    <span class="built_in">Point</span>(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1) &#123;</span><br><span class="line">        x = x1; y = y1;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;&gt;&gt; Normal constructor called.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Copy constructor.</span></span><br><span class="line">    <span class="built_in">Point</span>(<span class="keyword">const</span> Point&amp; p2) &#123;</span><br><span class="line">        x = p2.x; y = p2.y;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;&gt;&gt; Copy constructor called.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::string <span class="title">Print</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + std::<span class="built_in">to_string</span>(x) + <span class="string">&quot;, &quot;</span> + std::<span class="built_in">to_string</span>(y) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Let’s create a program that creates a <code>Point</code> object and prints it’s content.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Point <span class="title">GetPoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Point <span class="title">p</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Point p = <span class="built_in">GetPoint</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;&gt;&gt; &quot;</span> &lt;&lt; p.<span class="built_in">Print</span>() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The function <code>GetPoint()</code> initializes a local variable <code>p</code>, returns it directly, the caller takes the return value and initialzes another local variable <code>p</code>. It triggers copy elision and RVO, the output is as below, <strong>no copy operation</strong>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; Normal constructor called.</span><br><span class="line">&gt;&gt; (1, 2)</span><br></pre></td></tr></table></figure><p>Let’s add a new function <code>GetConstPoint2()</code> and create a static variable inside.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> Point <span class="title">GetConstPoint2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Point* p = <span class="keyword">new</span> <span class="built_in">Point</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> *p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Point p = <span class="built_in">GetPoint</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;&gt;&gt; &quot;</span> &lt;&lt; p.<span class="built_in">Print</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    Point p2 = <span class="built_in">GetConstPoint2</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;&gt;&gt; &quot;</span> &lt;&lt; p2.<span class="built_in">Print</span>() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As the static varialble outlive the scope of the function, it can’t be moved, so RVO can’t be applied here. Here’s the output, <strong>the second run has an extra “Copy constructor called”</strong>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; Normal constructor called.</span><br><span class="line">&gt;&gt; (1, 2)</span><br><span class="line">&gt;&gt; Normal constructor called.</span><br><span class="line">&gt;&gt; Copy constructor called.</span><br><span class="line">&gt;&gt; (1, 2)</span><br></pre></td></tr></table></figure><h2 id="Can-we-avoid-the-extra-copy-for-static-variable"><a href="#Can-we-avoid-the-extra-copy-for-static-variable" class="headerlink" title="Can we avoid the extra copy for static variable?"></a>Can we avoid the extra copy for static variable?</h2><p>Yes.</p><p>Since it’s a static variable, we don’t have to worry about its lifetime, we can return its pointer to avoid the object copy.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> Point* <span class="title">GetConstPoint3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Point* p = <span class="keyword">new</span> <span class="built_in">Point</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Point p = <span class="built_in">GetPoint</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;&gt;&gt; &quot;</span> &lt;&lt; p.<span class="built_in">Print</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Point p2 = <span class="built_in">GetConstPoint2</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;&gt;&gt; &quot;</span> &lt;&lt; p2.<span class="built_in">Print</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Point* p3 = <span class="built_in">GetConstPoint3</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;&gt;&gt; &quot;</span> &lt;&lt; p3-&gt;<span class="built_in">Print</span>() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As using a const pointer, we can not only access the variable without an object copy, but also keep it immutable (safe), here’s the output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; Normal constructor called.</span><br><span class="line">&gt;&gt; (1, 2)</span><br><span class="line">&gt;&gt; Normal constructor called.</span><br><span class="line">&gt;&gt; Copy constructor called.</span><br><span class="line">&gt;&gt; (1, 2)</span><br><span class="line">&gt;&gt; Normal constructor called.</span><br><span class="line">&gt;&gt; (1, 2)</span><br></pre></td></tr></table></figure><p>Full example code can be found here: <a href="https://onlinegdb.com/rk0fbM3rI">https://onlinegdb.com/rk0fbM3rI</a>.</p><h2 id="Sum-up"><a href="#Sum-up" class="headerlink" title="Sum up"></a>Sum up</h2><p>RVO doesn’t work for static variable, which has been allocated in program lifetime and can’t be moved.</p><p>Once we understand how and why copy elision and RVO are helpful to code performance optimization, we would know when to use it and when not to.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://zpjiang.me/2018/08/01/Copy-Elision-in-C/">Copy Elision and Return Value Optimization in C++</a></li><li><a href="https://www.geeksforgeeks.org/static-keyword-cpp/">Static Keyword in C++</a></li></ul>]]></content>
    
    <summary type="html">
    
      Copy elision and return value optimization doesn&#39;t work for static variable because it has a program lifetime and can&#39;t be moved.
    
    </summary>
    
    
      <category term="c++" scheme="http://zpjiang.me/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Facebook 北美地区 E3 到 E8 程序员薪水分析</title>
    <link href="http://zpjiang.me/2020/02/04/fb-eng-comp/"/>
    <id>http://zpjiang.me/2020/02/04/fb-eng-comp/</id>
    <published>2020-02-04T20:00:00.000Z</published>
    <updated>2021-05-21T05:52:47.919Z</updated>
    
    <content type="html"><![CDATA[<p>前一篇 <a href="/2020/02/03/eng-comp-level/">湾区大厂程序员薪水构成、level 和对应期望</a>，介绍了硅谷几座大厂程序员薪水的基本构成和每个 level 的对应职责。这一篇，我们利用 <a href="https://levels.fyi">levels.fyi</a> 的公开数据（包含了从 2017 年到 2020 年各大科技公司、各类职位、各个 level 的收入数据），就脸书 FB 从 E3 到 E8 程序员的年收入 TC (Total Compensation) 做一些分析。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_fb_hq.jpg" alt="Facebook logo in front of its headquarter."></p><span id="more"></span><blockquote><p><a href="/2020/02/04/fb-eng-comp/#数据说明">数据说明</a><br><a href="/2020/02/04/fb-eng-comp/#FB-程序员到底赚多少钱">FB 程序员到底赚多少钱</a><br><a href="/2020/02/04/fb-eng-comp/#收入-vs-地区">收入 vs. 地区</a><br><a href="/2020/02/04/fb-eng-comp/#收入-vs-时间">收入 vs. 时间</a><br><a href="/2020/02/04/fb-eng-comp/#基本工资-vs-年终奖-vs-股票">基本工资 vs. 年终奖 vs. 股票</a><br><a href="/2020/02/04/fb-eng-comp/#收入-vs-性别">收入 vs. 性别</a></p></blockquote><h2 id="数据说明"><a href="#数据说明" class="headerlink" title="数据说明"></a>数据说明</h2><ul><li>数据仅限 FB 北美地区的 Software Engineer 职位，约 700 个数据点</li><li>数据金额单位为千刀，比如，下图 E3 中位数 170 千刀，即 17 万刀</li><li>数据覆盖 2017 年到 2020 年，考虑每年市场价上升的趋势和股票上涨，大家现在的实际收入会比下面的数据稍高</li><li>所有图表均为作者通过 <a href="https://observablehq.com/">Observable</a> 绘制，<strong>转载请<a href="/2020/02/04/fb-eng-comp/#小结">公众号</a>留言</strong></li></ul><h2 id="FB-程序员到底赚多少钱"><a href="#FB-程序员到底赚多少钱" class="headerlink" title="FB 程序员到底赚多少钱"></a>FB 程序员到底赚多少钱</h2><p><strong>图 1: 各 level 的收入四分位图</strong></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_fb_tc_level_box.png" alt="TC by software engineer level."></p><table><thead><tr><th style="text-align:center">#</th><th style="text-align:center">E3</th><th style="text-align:center">E4</th><th style="text-align:center">E5</th><th style="text-align:center">E6</th><th style="text-align:center">E7</th><th style="text-align:center">E8</th></tr></thead><tbody><tr><td style="text-align:center">p75</td><td style="text-align:center">186</td><td style="text-align:center">265</td><td style="text-align:center">400</td><td style="text-align:center">600</td><td style="text-align:center">950</td><td style="text-align:center">1450</td></tr><tr><td style="text-align:center">p50</td><td style="text-align:center">170</td><td style="text-align:center">250</td><td style="text-align:center">362</td><td style="text-align:center">520</td><td style="text-align:center">850</td><td style="text-align:center">1450</td></tr><tr><td style="text-align:center">p25</td><td style="text-align:center">162</td><td style="text-align:center">227</td><td style="text-align:center">333</td><td style="text-align:center">488</td><td style="text-align:center">723</td><td style="text-align:center">990</td></tr></tbody></table><p><strong>图 2: 各 level 的收入分布范围</strong></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_fb_tc_level.png" alt="TC by software engineer level."></p><ul><li>颜色越深代表数据点重合得越多</li><li>低 level 数据点较多，更具有代表性；高 level 数据点较少，参考价值较小</li><li>E3/E4/E5 的收入范围重合部分较多，主要原因是：<ul><li>北美各地区同 level 收入差异明显，可能奥斯汀的 E5 收入跟湾区 E4 差不多</li><li>低 level 从 Ln 升职到 Ln+1 涨幅不大，外面跳槽进 Ln+1 negotiate 可以拿到 Ln+1 range 的 high end</li></ul></li><li>E6/E7/E8 收入范围很宽，主要原因有：<ul><li>数据点较少</li><li>E6+ 的程序员工作资历久，这几年科技公司股票疯长，几年下来收入差距越来越明显</li></ul></li></ul><h2 id="收入-vs-地区"><a href="#收入-vs-地区" class="headerlink" title="收入 vs. 地区"></a>收入 vs. 地区</h2><p>北美程序员主要集中在三蕃湾区、西雅图和纽约，这三个地方程序员收入水平较高，相比之下，奥斯汀、波士顿、洛杉矶、匹兹堡等地区则收入稍低。如上面分析，这种现象导致的问题是每个 level 的 range 过大，波士顿的 E5 可能只相当于湾区 E4 的 p75。</p><p>考虑到冷门城市数据点较少，我们就着重看看纽约（501）、三蕃（807）和西雅图（819）地区的收入分布。</p><p><strong>图 3: 纽约、三蕃和西雅图地区的各 level 收入分布</strong></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_fb_tc_dma.png" alt="TC by software engineer level by dma."></p><p><img style="width: 90%" src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_fb_tc_level_dma.png" alt="TC by software engineer level by dma."></p><ul><li>三种颜色分别代表 <span style="color: #5579a4;"><strong>纽约地区</strong></span>，<span style="color: #e68a39"><strong>三蕃-奥克兰-圣何塞</strong></span> 和 <span style="color: #d45f5b"><strong>西雅图-塔科马地区</strong></span>。</li><li>相比于纽约和西雅图，三蕃湾区每个 level 都有特别大包裹的 outliers<ul><li>湾区大牛多</li><li>湾区科技公司多，竞争更加激烈，各公司为了抢人会破例开出大包裹</li></ul></li><li>三蕃湾区数据点最多、西雅图其次、纽约较少<ul><li>湾区“硅谷”名副其实</li><li>西雅图免州税，而加州和纽约苛捐杂税都很高，所以还是有不少人选择西雅图</li></ul></li><li>每个 level 的 range 三蕃湾区最大，西雅图其次，纽约较小<ul><li>程序员基数大，各种水平的人数都不少</li><li>三蕃竞争激烈，找工作谈薪水讨价还价空间更大</li></ul></li></ul><h2 id="收入-vs-时间"><a href="#收入-vs-时间" class="headerlink" title="收入 vs. 时间"></a>收入 vs. 时间</h2><p><strong>图 4: 近三年各 level 收入中位数</strong></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_fb_tc_year.png" alt="TC by software engineer level by dma."></p><ul><li>三种颜色分别代表 <span style="color: #5579a4;"><strong>2018 年</strong></span>，<span style="color: #e68a39"><strong>2019 年</strong></span> 和 <span style="color: #d45f5b"><strong>2020 年</strong></span></li><li>这三年 E3/E4/E5 收入基本持平，E6/E7 稳中有涨<ul><li>最近几年程序员行业确实不及 14/15 年那么火爆，从湾区的房市也可见一斑</li><li>高 level 程序员涨势不错，猜测是因为持有股票较多，TC 跟着股票一起涨</li></ul></li></ul><h2 id="基本工资-vs-年终奖-vs-股票"><a href="#基本工资-vs-年终奖-vs-股票" class="headerlink" title="基本工资 vs. 年终奖 vs. 股票"></a>基本工资 vs. 年终奖 vs. 股票</h2><p><strong>图 5: TC 中的基本工资、年终奖、股票组成</strong></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_fb_tc_base_bonus_stock.png" alt="TC composition by software engineer level."></p><ul><li>不论 level，基本工资（base）涨幅更趋线性，每升一级涨两三万</li><li>年终奖（bonus）跟基本工资正相关，基本工资的 10% 到 30%，level 越高 target bonus ratio 也越高，计算公式参考 <a href="/2020/02/03/eng-comp-level/#薪水构成">薪水构成</a></li><li>股票（RSU）才是影响 TC 中的关键因素，E3/E4 股票收入占比较小，但 E5+ 股票逐步成为收入的主要部分<ul><li>level 越高，个人对公司战略方向的影响越大，收入与公司表现绑定更紧密</li><li>level 越高，公司表现对个人收入影响也越大，这些人更自然地会从大局出发，捍卫公司利益</li><li>猜想 1：level 越低，股票收入越少，公司表现对其影响也较小，所以跳槽率较高？（LinkedIn 的 DS 应该有这些数据做相关分析）</li><li>猜想 2：level 越高，对公司粘性越高，如果公司股票业绩不错，跳槽率相应较小？<ul><li>猜想：年纪越大，跳槽的意愿应该会越低，因为换一个陌生环境从头开始的成本更高</li></ul></li></ul></li></ul><h2 id="收入-vs-性别"><a href="#收入-vs-性别" class="headerlink" title="收入 vs. 性别"></a>收入 vs. 性别</h2><p>看了各个 level、地区的收入情况，那么 FB 的 diversity 做得怎么样呢？据 FB 2019 年的 diversity report，技术岗，女性占比 23%。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_fb_gender.png" alt="FB tech position gender percentage."></p><p>然而，在我们从 levels.fyi 收集的数据中，女性数据占比仅为 10% 左右，以下图表可能会因为数据点偏少而不准确。</p><p><strong>图 6: 各 level 不同性别收入情况</strong></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_fb_tc_gender.png" alt="TC composition by software engineer level and gender."></p><ul><li>仅从上图看，E3~E5 女性收入均比男性稍稍低一些</li><li>E6 女性收入稍高，而 E7 女性收入低不少，我更倾向于认为是数据点偏少造成的</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>作为北美数一数二的大科技公司，FB 给程序员的包裹还是非常慷慨大方的，<a href="https://en.wikipedia.org/wiki/Household_income_in_the_United_States">美国 2019 年家庭年收入中位数为 $63,688</a>（加州 $71,805，纽约 $64,894），就算是刚刚毕业的本科/硕士，拿到的 E3 中位数也有 $170,000，再加上公司各种各样的诱人福利，科技行业的待遇好毋庸置疑！</p><p>当然，一切脱离具体情况讨论收入的行为都是耍流氓。考虑到三蕃、纽约高昂的生活成本，日益拥堵的上下班交通，看病、买房、人工服务、小孩上学、吃饭，等等，这里面每一样都不便宜。在湾区待了这么多年，周围的朋友 come and go，每个人对生活的追求很不一样。</p><p>说了这么多，希望文中提供的信息能对正在找工作、跳槽、考虑来三蕃/纽约/西雅图甚至是美国的小伙伴有点帮助。有什么问题，欢迎在文末评论区留言，或者关注公众号<strong><a href="https://blog.1pixel.cc/">湾区搬砖先生</a></strong>。</p><p><br>  <img    src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_wechat_qr_code.png"    alt="微信公众号： 湾区搬砖先生"    style="margin: 0; width: 280px;"><br></p><h2 id="Disclaimer"><a href="#Disclaimer" class="headerlink" title="Disclaimer"></a>Disclaimer</h2><ul><li>所有数据来源于网络<a href="https://levels.fyi">公开内容</a>，准确性请读者自行判断</li><li>以上所有内容均为作者个人观点，与作者所在公司及其他组织无关</li></ul>]]></content>
    
    <summary type="html">
    
      根据2017年至2020年近700+数据点，全面分析Facebook北美地区从E3到E8程序员薪水分布、薪酬涨幅、地区差异等。
    
    </summary>
    
    
      <category term="tech" scheme="http://zpjiang.me/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>湾区大厂程序员薪水构成、level 和对应期望</title>
    <link href="http://zpjiang.me/2020/02/03/eng-comp-level/"/>
    <id>http://zpjiang.me/2020/02/03/eng-comp-level/</id>
    <published>2020-02-03T20:00:00.000Z</published>
    <updated>2021-05-21T05:52:47.919Z</updated>
    
    <content type="html"><![CDATA[<p>新年伊始，周围不少小伙伴拿完 bonus，打算转行或跳槽，正好问到了程序员待遇、level 等话题，这里就硅谷几个大厂（谷歌、脸书、领英、亚麻、微软等）的薪水构成、程序员 level 以及职业发展做一些简单介绍。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_silicon_valley_s5_intro.jpg" alt="Silicon Valley TV Show Intro Screenshot."></p><span id="more"></span><h2 id="薪水构成"><a href="#薪水构成" class="headerlink" title="薪水构成"></a>薪水构成</h2><p>科技公司的小伙伴们会用 TC，Total Compensation，来表示实际收入总包裹大小。TC 的计算方法各公司稍有不同，但无外乎包括以下几个部分：</p><ul><li>基本工资 Base</li><li>年终奖 Bonus<ul><li>股票 Equity (RSU/Option)</li><li>初始股票 Initial grant</li><li>新发股票 Refresh</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_money.jpeg" alt="Money all over the air."></p><p><strong>基本工资 Base</strong></p><p>这是写在入职合同上的固定收入，根据入职时的市场价、Level、面试表现、有无competing offer 等决定的。</p><p>升职后，基本工资会有所调整。在各大公司内部，不同的 level 对应一个范围，升值后有些公司会将 base 提高到下一个 level 范围的 p50，也就是中位数。</p><p>当然，具体情况具体讨论。比如，有些人在某一 level 待了很久，或者跳槽的包裹牛上天，很有可能他们现在的 base 已经是当前 level 的 high end（逼近下一个 level 的中位数），那升职后 base 只会微涨。</p><p><strong>年终奖 Bonus</strong></p><p>年终奖各公司计算方法不同，湾区的几个大厂或多或少可以按照这个公式计算：</p><p>bonus = base <em> target_bonus_ratio </em> individual_multiplier * company_multiplier + manager’s_tweak</p><p>其中，target bonus ratio 是固定的，level 越高，ratio 越大。Individual performance multiplier 是根据一年表现打分算得，company multiplier 是根据公司这一年基本状况算得。最后有些公司还有老板微调，每个小组会有一个 budget pool，根据小组成员贡献老板再稍微平衡一下。</p><p><strong>Bonus 是对过去一年辛苦付出的肯定。</strong></p><p><strong>股票 Equity</strong></p><p>股票收入主要包含两部分：</p><ul><li>初始合同一次性承诺给予，分四年（或五年）按月/季度/年发放<ul><li>各公司政策稍有不同，有些公司在员工入职一年后才开始按季度发（业内叫 one-year cliff），而有些公司入职第一个月就开始发</li><li>不是所有公司都等额发放，比如亚麻头两年 5% 和 15%，后面两年各 40%，Snap 也有类似规定</li></ul></li><li>每年新发<ul><li>每过一年，公司会根据员工表现，新发一定股票，同样也是分四年发完</li><li>新入职第一年，不是所有公司都给 refresh</li><li>Uber 把 refresh 当成 bonus 的一部分，分 cash bonus 和 stock bonus</li><li>各家公司 refresh 规定都不太一样，会随着市场情况调整，具体情况具体讨论</li></ul></li></ul><p><strong>Refresh 是对员工未来四年工作表现的期望。</strong></p><p><strong>其他</strong></p><p>除了以上提到几点，刚入职是还会有一笔现金签字费，入职后一定时间内支付，主要由 negotiation（有无 competing offer、公司多么想招你）决定。</p><p>另外，还有各大科技公司著名的好福利，比如健康保险、免费的一日三餐、健身房、游泳池，博物馆免费门票/打折票，车险、房屋保险、租车、买车、滑雪等一系列的 corporate rate，免费/打折的衣服干洗、理发、体检，commuter benefit 报销上下班公共交通，等等。</p><p>例外，大公司里面：</p><ul><li>微软、亚麻和苹果没有免费食堂（部分 office 有，个人认为自己掏钱是好事）</li><li>Netflix 的福利，是给员工 all cash，很多很多 cash</li></ul><h2 id="程序员-Level"><a href="#程序员-Level" class="headerlink" title="程序员 Level"></a>程序员 Level</h2><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_eng_levels.jpeg" alt="Software Engineer Levels among Google, Facebook, Linkedin, Microsoft and Amazon."></p><p><em>图片截自：<a href="https://levels.fyi">https://levels.fyi</a></em></p><p>各大科技公司 level 各不相同，几家大厂基本都可以按照上图转换和参考，这点跟国内程序员level都看阿里有点相似。</p><p>对于应届毕业生、工作一年跳槽、合同工转正等的小伙伴，会拿到 L3/E3/T3/SDE I/IC I 等这些 level（每个公司叫法不一），基本是 Junior level，基本期望有：</p><ul><li>在一定指导下，完成指定任务</li><li>在一定指导下，参与系统设计</li><li>产出质量还可以</li><li>新人 rampup 可以是半年到一年</li></ul><p>博士毕业生、工作个两、三、四年再跳槽的小伙伴，会拿到 L4/E4/T4/SDE II/IC II 等这些 level，算 median level，基本期望有：</p><ul><li>在 minimum guidance 下，完成有一定挑战的任务</li><li>在 minimum guidance 下，完成系统设计</li><li>逐步成为一些项目的 go-to person（有问题就知道可以问你）</li><li>工作完成质量高</li><li>最佳状态：能够独立工作，包括项目系统设计、实现、协调各方、测试、内测、QA、文档、做实验、发布这一系列的任务</li><li>新人 rampup 可以是三个月到半年</li></ul><p>下一级，便是老年人行列 senior level， L5/E5/T5/Senior，到达这一级每家公司需要的时间差异挺大，相应的机遇成分也开始变得重要，基本期望有：</p><ul><li>独立自主，完成上面提到的一系列工作</li><li>独立自主，攻克模棱两可的问题，提出完美/次完美/临时/长期的解决方案，成为组里的技术专家</li><li>项目负责人，或者成为一个产品分支的负责人，带领团队，完成系统设计、开发、测试等一系列的工作</li><li>自我驱动，也能带动、影响身边的人，制定自我优先级、制定小组优先级</li><li>写代码之外，更加注重系统的稳定性、扩展性、安全性、监控、报警、文档、跨组、跨部门甚至跨公司协调工作</li><li>更佳的状态：协调组内资源、争取内外部资源、招人、带人、扩大 scope</li></ul><p>老年人之后的 level，各公司叫法不一，Staff、Principal、抑或是直接用数字表示。到这一 level，个人能力是一方面，个人精力、愿意付出的时间、机遇等因素会扮演更加重要的角色。我理解的期望有：</p><ul><li>做好以上的所有工作</li><li>更多地参与战略、资源、季度/年度优先级的讨论</li><li>标准化整个团队的工作、提高团队的工作效率、产出水准、工作范围</li><li>培养团队，帮助小伙伴成长</li><li>* 可以解决没有人解决过的问题，进入全新或非常有挑战的领域</li><li>* 可以管理10+的人</li><li>* 可以是一个领域内的专家，对这个领域的未来都能带来影响</li><li>* 充分非必要条件</li></ul><p>在这之后的等级，等以后有机会再写吧。。。</p><p>以上提到的是 IC 岗，Individual Contributor，如果转 People Manager，或者是依然做技术的 Teach Lead Manger (TLM)，那 L5 一般对应 M0， L6 是 M1，以此类推。</p><p>特殊说明：</p><p>以上只是部分大公司常见的 level 分法，老年人这一级，Uber 还会细分 5.a 和 5.b，微软有 63 和 64，而 Netflix 所有人都是 senior</p><p>目前没看到程序员到 35 岁就一定要转管理的现象，转与不转，这取决于机遇、个人性格以及家庭等多方面因素，我周围非常多 high level IC，WLB 好得很，也不用处理很多 dirty work，收入跟 level 相关，跟 title 无强相关</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>之所以写这些，一是因为最近朋友跳槽刚好问到，二是想记录过去这一年自己大公司爬梯子的心得体会。在湾区，周围聪明人很多，不管你曾经多么优秀，这里你永远能找到比你强还比你努力的人。</p><p>当然了，生活不只是工作，能找到喜欢的项目，让自己时刻保持积极的学习状态，勇于走出眼前的一亩三分地 comfort zone，清楚当前市场的需求并保持警觉，最后结果都不会太差。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_career_direction.jpeg" alt="Direction in a Street Coner."></p><p>讲了这么多，希望能对正在找工作以及想要入职大公司的小朋友能有所帮助。如果有问题， 或者需要 Google/Linkedin/Facebook 等大厂内推的，欢迎公众号留言！</p><p><br>  <img    src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_wechat_qr_code.png"    alt="微信公众号： 湾区搬砖先生"    style="margin: 0; width: 280px;"><br></p><p><strong>Disclaimer</strong></p><p>以上仅为个人观点和个人总结，不代表任何公司和组织</p><p>所有内容均为公共开放信息，如有侵权，请联系更正或删除</p>]]></content>
    
    <summary type="html">
    
      新年伊始，周围不少小伙伴拿完 bonus，打算转行或跳槽，正好问到了程序员待遇、level 等话题，这里就硅谷几个大厂（谷歌、脸书、领英、亚麻、微软等）的薪水构成、程序员 level 以及职业发展做一些简单介绍。
    
    </summary>
    
    
      <category term="tech" scheme="http://zpjiang.me/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>The const reference vs pointer in C++ class constructor</title>
    <link href="http://zpjiang.me/2020/01/20/const-reference-vs-pointer/"/>
    <id>http://zpjiang.me/2020/01/20/const-reference-vs-pointer/</id>
    <published>2020-01-20T20:00:00.000Z</published>
    <updated>2021-05-21T05:52:47.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tl-dr"><a href="#tl-dr" class="headerlink" title="tl;dr"></a>tl;dr</h2><p>There are many discussions between <strong>reference</strong> and <strong>pointers</strong>, it’s not always true to say “<a href="https://www.geeksforgeeks.org/passing-by-pointer-vs-passing-by-reference-in-c/">use references when you can, and pointers when you have to</a>“. We should pay attention to the lifetime of the input parameters, choose the one that is safer and more efficient according to the use case.</p><h2 id="How-to-pass-a-parameter"><a href="#How-to-pass-a-parameter" class="headerlink" title="How to pass a parameter?"></a>How to pass a parameter?</h2><p>Before we talk about const reference vs. pointer in C++ class constructor, let’s take a quick look at different ways of passing a parameter to a function.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Passing by value.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Passing by const reference.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Passing by pointer.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span><span class="params">(<span class="keyword">int</span>* a)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Passing by const pointer.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>* a)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">#</th><th>parameter</th><th style="text-align:center">object copied?</th><th style="text-align:center">original object mutable?</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>passing by value</td><td style="text-align:center">✔️</td><td style="text-align:center">X</td></tr><tr><td style="text-align:center">2</td><td>passing by const reference</td><td style="text-align:center">X</td><td style="text-align:center">X</td></tr><tr><td style="text-align:center">3</td><td>passing by pointer</td><td style="text-align:center">X</td><td style="text-align:center">✔️</td></tr><tr><td style="text-align:center">4</td><td>passing by const pointer</td><td style="text-align:center">X</td><td style="text-align:center">X</td></tr></tbody></table><p>As it can easily tell from the table above, <strong>passing by value</strong> introduces an extra object copy, while <strong>passing by pointer</strong> makes the original object mutable.</p><p><strong>If you just want to pass some data, do some work with its value without updating it</strong>, you can choose #2 or #4, (don’t pick #1 as it’s could be expensive especially for large object, don’t use #3 as you could mistankenly update its value). Between #2 and #4, I’m leaning to #2 because reference is always non-nullable.</p><p><strong>If you want to pass a parameter and update its value</strong>, pick #3 obviously.</p><p>I rarely use #1 in daily work.</p><span id="more"></span><h2 id="Is-passing-const-pointer-always-safe"><a href="#Is-passing-const-pointer-always-safe" class="headerlink" title="Is passing const pointer always safe?"></a>Is passing const pointer always safe?</h2><p>Not really.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="keyword">const</span> std::string&amp; name) : <span class="built_in">name_</span>(name) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> std::string&amp; <span class="title">GetName</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> name_; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">const</span> std::string&amp; name_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>The above example uses <strong>const reference</strong> in a class constructor, it looks perfectly normal, right? What if we initialize <code>Person</code> lie this:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SomeFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">person</span><span class="params">(<span class="string">&quot;Ox333&quot;</span>)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; person.<span class="built_in">GetName</span>();  <span class="comment">// Error!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When creating <code>person</code>, the inside field <code>name_</code> is just an alias of the temporary string <code>Ox333</code>. Once <code>person</code> is created, the temporary string goes out of scope, when it tries to print out the name (the content that the alias refers to), it doesn’t exist anymore. The behavior becomes unpredictable!</p><p>On OnlineGDB, it prints empty result. Live example: <a href="https://onlinegdb.com/HyOIEOS-U">https://onlinegdb.com/HyOIEOS-U</a>.</p><h2 id="How-to-avoid-this"><a href="#How-to-avoid-this" class="headerlink" title="How to avoid this?"></a>How to avoid this?</h2><p>A straightforward fix is to store the value inside the class, so it’s always accessible, however, it requires an extra copy.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="keyword">const</span> std::string&amp; name) : <span class="built_in">name_</span>(name) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> std::string&amp; <span class="title">GetName</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> name_; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    std::string name_;  <span class="comment">// Store the value inside the class!</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Another fix, is to store the const pointer.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// The ownership is outside the class.</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="keyword">const</span> std::string* name) : <span class="built_in">name_</span>(name) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> std::string&amp; <span class="title">GetName</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> *name_; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// Not owned, shouldn&#x27;t be null.</span></span><br><span class="line">    <span class="keyword">const</span> std::string* name_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>By doing so, if the caller tries to create a <code>person</code> with a temporary string, the compiler would complain it takes the address of a temporary variable. The unpredictable behavior is avoided proactivey by the compiler.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::string <span class="title">GetString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;A string&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SomeFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">person</span><span class="params">(&amp;GetString())</span></span>;  <span class="comment">// Error: taking address of temporary [-fpermissive]</span></span><br><span class="line">    std::cout &lt;&lt; person.<span class="built_in">GetName</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Live example: <a href="https://onlinegdb.com/B15NNuHWL">https://onlinegdb.com/B15NNuHWL</a>.</p><h2 id="Can-we-do-better"><a href="#Can-we-do-better" class="headerlink" title="Can we do better?"></a>Can we do better?</h2><p>We can use <strong>const reference</strong> to enforce the field <code>name_</code> to be non-nullable. By doing so, we don’t need to worry if the field <code>name_</code> is a nullptr or not.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// The ownership is outside the class.</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="keyword">const</span> std::string* name) : <span class="built_in">name_</span>(*name) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> std::string&amp; <span class="title">GetName</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> name_; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">const</span> std::string&amp; name_;  <span class="comment">// Use const reference to enforce non-nullable.</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Check the live example: <a href="https://onlinegdb.com/Hy9hOurbU">https://onlinegdb.com/Hy9hOurbU</a>.</p><h2 id="To-sum-up"><a href="#To-sum-up" class="headerlink" title="To sum up"></a>To sum up</h2><p>There is no such a golden rule telling you when to choose <strong>const reference</strong> or <strong>pointer</strong>, what we can do is to understand how it works, choose the most suitable solution according to the specific case.</p>]]></content>
    
    <summary type="html">
    
      The difference between using const reference and pointers in C++ class constructor is tricky, we should pay attention to the lifetime of the input parameters.
    
    </summary>
    
    
      <category term="c++" scheme="http://zpjiang.me/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>解决百度爬虫无法爬取 Github Pages 个人博客的问题</title>
    <link href="http://zpjiang.me/2020/01/15/let-baidu-index-github-page/"/>
    <id>http://zpjiang.me/2020/01/15/let-baidu-index-github-page/</id>
    <published>2020-01-15T20:00:00.000Z</published>
    <updated>2021-05-21T05:52:47.919Z</updated>
    
    <content type="html"><![CDATA[<p>据 <a href="https://www.marketmechina.com/baidu-search-engine-market-share-in-china-dec-2019/">marketmechina</a> 统计，去年12月份中国市场全平台 （桌面+手机客户端）搜索引擎市场份额：</p><ul><li>百度: 67.09%</li><li>搜狗: 18.75%</li><li>神马: 6.84%</li><li>谷歌: 2.64%</li><li>必应: 2.6%</li><li>其它: 2.08%</li></ul><p>不得不说，即使大家现在如此 diss 百度，这中文搜索的第一把交椅，百度还是坐的很稳。想要获得中文搜索的流量，百度这一入口不容忽视。</p><span id="more"></span><h2 id="GitHub-Pages-个人博客"><a href="#GitHub-Pages-个人博客" class="headerlink" title="GitHub Pages 个人博客"></a>GitHub Pages 个人博客</h2><p>Github Pages 这项服务自上线后，很快就成为了程序员搭建静态个人博客的最佳之选，大家喜欢的原因有很多，比如</p><ul><li>可以像写 code 一样写文章</li><li>可以通过命令行 git push 一键发布网站，酷炫 😎</li><li>静态网页生成框架选择众多，插件完善，自定义性很高</li><li>如果懂点前端，上手非常容易</li></ul><p>更不用提版本追踪、多人协作这些 Git 自带的优势了。2013年，我也是用 Jekyll 在 GitHub Pages 上搭了个人第一个博客。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_blog.png" alt="First blog screenshot"></p><h2 id="百度爬虫被拒绝访问"><a href="#百度爬虫被拒绝访问" class="headerlink" title="百度爬虫被拒绝访问"></a>百度爬虫被拒绝访问</h2><p>然而，2015年，因为一些不能细说的原因，Github 开始拒绝百度爬虫的访问，直接返回 403。</p><p>官方给出原因是，百度爬虫爬得太狠，影响了 Github Page 服务的正常使用。这就导致了，但凡在 Github Page 搭建的个人博客，都无法被百度收录。</p><p>自去年年底佛罗里达之行回来，我开始写中文游记，目前为止，Google 收录非常及时全面，SEO 效果也很不错。但如果只有国外的中文读者可以搜索到这些文章，那国内这最大的一批中文读者就被忽略了，再好的内容无法被分享出去也是白搭。</p><p>于是，我开始捣鼓如何让百度爬虫收录我的个人博客。</p><h2 id="CDN-解决不了问题"><a href="#CDN-解决不了问题" class="headerlink" title="CDN 解决不了问题"></a>CDN 解决不了问题</h2><p>我在网上粗略搜了一番，不少人提到 CDN，然而，CDN 无法完美解决问题，尤其对小流量的个人博客。</p><p><a href="https://www.cloudflare.com/learning/cdn/what-is-a-cdn/" title="What is CDN?">传送门：什么是 CDN</a>。</p><p><img src="https://raw.githubusercontent.com/0x333333/hexo_img/master/cdn-ntt-com2.jpg" alt="CDN structure"></p><p><strong>先说结论，CDN 无法完美解决问题，尤其对小流量的个人博客。</strong></p><p>原理上来讲，CDN 解决了最后一公里的资源分发，如果国内的 CDN 服务器有博客的静态文件，那百度爬虫访问时直接从 CDN 节点上爬取资源，Github 源站拒绝访问的问题自然就不存在了。</p><p>但是，问题就出在 CDN 节点上。第一次访问时，CDN 上的缓存还未建立，爬虫的请求会被转发到 Github 源站，由于转发请求默认携带了百度爬虫的UA 还有原始 IP，GitHub 发现后会直接拒绝。</p><p>有些人会说，国内有些 CDN 厂商支持主动缓存预热（老本行 😂），但缓存是有失效时间的，expired 之后，照样得回源。对于流量小的个人博客，想让资源一直缓存在 CDN 节点上，不现实，新写的文章怎么发布？修改的文章怎么更新？</p><p>当然，如果 CDN 节点回源时能够不带上客户端 User Agent，Github 便认不出这是正常访问还是百度爬虫了。这个方法是可行的，很多人提到了用 Nginx 反向代理，然后 override forward IP，这确实可以糊弄过去。只不过，这些方法都需要一定的定制能力，如果是个人开发者，还得买一台 VPS 或者云服务器。</p><h2 id="Coding-Pages-做镜像站"><a href="#Coding-Pages-做镜像站" class="headerlink" title="Coding Pages 做镜像站"></a>Coding Pages 做镜像站</h2><p>国内 coding.net 现在也有了类似于 GitHub Pages 的服务：Coding Pages。</p><p>在博客静态文件 repo 的配置中同时加上 Github 和 coding.net 的 remote 地址，这样一键发布，两地更新。加上域名智能解析，对于国内的请求，转发到 Coding Page 即可。</p><p>可惜的是，现在 <em>.coding.me 和 </em>.coding.io 访问时会先出现跳转页面，导致百度爬虫无法正常收录。</p><h2 id="有没有简单、可靠还免费的方法？"><a href="#有没有简单、可靠还免费的方法？" class="headerlink" title="有没有简单、可靠还免费的方法？"></a>有没有简单、可靠还免费的方法？</h2><p>答案是，有！</p><p>前段时间逛 Twitter，看到大神 <a href="https://twitter.com/rauchg">Guillermo Rauch</a> 的一篇文章 <a href="https://rauchg.com/2020/2019-in-review">2019 in Review</a>，顺便就去看了他们创业正在做的产品，zeit.co，提供的正是免费的静态资源 hosting 服务。</p><p>抱着试试的心态，我跟着官网文档，不到十分钟就配完了，用百度爬虫一抓，200！</p><p>写这篇博客的时候刚好一周，从百度站长上看，文章正在慢慢被收录。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_baidu_index_status.png" alt="baidu index status"></p><p>其实 zeit.co 的原理跟上述几个思路类似，本质上他们提供了 Storage + CDN + DNS 这一套完整服务。根据他们的文档，整个过程我只需要：</p><ul><li>用我的 Github 账户登陆，给了 zeit 我的静态网页 repo 的 read 权限</li><li>等几秒，importing</li><li>部署成功！</li></ul><p>不用写任何 code，点两下鼠标就完事了。部署完成后，会生成一个类似于 xxxxxxx.now.sh 的链接，点击即可访问，静态资源已经部署到了他们的边缘 CDN 节点上。</p><p>到了这一步，接下来需要做的就是切换域名，通过智能 DNS 把国内流量切过去。</p><p>不过，为了省事，我决定直接放弃 GitHub Page 提供的 CDN 功能，原本的一套技术栈是 GitHub + GitHub Pages（Fastly CDN）+ Default DNS，如果 zeit 能够提供足够智能的 CDN 和 DNS 服务，没有必要中间套两层 CDN，新的技术栈变成了 GitHub + zeit Smart CDN + zeit Smart DNS。一旦有新的文件 submit 到 GitHub，zeit 就能自动触发更新，这跟 GitHub Pages 是一样的。</p><p>于是，我把自定义域名到 Github Page 的 CNAME 记录，换成 zeit.co 提供的 TXT 和 CNAME 记录（TXT记录用来验证）。</p><p>后来，我发现更好的做法是，直接用 zeit 提供的 nameserver 智能 DNS，测下来解析比域名自带的免费 DNS 效果还要好。下图是他们的 CDN 节点分布，中国附近台湾和香港都有节点，国内访问应该速度不会太慢。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_zeit_cdn.png" alt="zeit cdn nodes"></p><p>除了以上提到的这些，zeit 还提供了一些小 feature，比如免费的 HTTPS，基本GitHub Pages 有的 zeit 都有。对于免费用户，每个月流量限额是20G，这点对我来说已经远够用了。</p><p><strong>Disclamer: 我没有收 zeit 任何推广费，纯粹是慕大神之名而来。</strong><br><strong>PS: 百度站长里 sitemap 提交了快一周，才收录了 11 篇文章，这速度真是慢。</strong></p>]]></content>
    
    <summary type="html">
    
      这篇文章提供了一个简单免费的解决方案，可以让百度爬虫成功抓取并收录基于 Github Page 搭建的个人博客。
    
    </summary>
    
    
      <category term="blog" scheme="http://zpjiang.me/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Use git-mv to Rename or Move a File</title>
    <link href="http://zpjiang.me/2020/01/12/git-mv/"/>
    <id>http://zpjiang.me/2020/01/12/git-mv/</id>
    <published>2020-01-12T20:00:00.000Z</published>
    <updated>2021-05-21T05:52:47.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tl-dr"><a href="#Tl-dr" class="headerlink" title="Tl;dr"></a>Tl;dr</h2><p>Use</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mv [source_file] [destination_file]</span><br></pre></td></tr></table></figure><p>to rename or move a file instead of renaming or moving a file directly (e.g. from IDE, or via <code>mv</code>). This is helpful for preserving history and potentially helpful for preventing merge mistakes.</p><span id="more"></span><h2 id="What’s-git-mv"><a href="#What’s-git-mv" class="headerlink" title="What’s git mv"></a>What’s git mv</h2><p>According to <a href="https://git-scm.com/docs/git-mv">Git - git-mv Documentation</a>,</p><blockquote><p>git-mv - Move or rename a file, a directory, or a symlink.</p></blockquote><h2 id="Why-can’t-we-just-rename-or-move-a-file-directly"><a href="#Why-can’t-we-just-rename-or-move-a-file-directly" class="headerlink" title="Why can’t we just rename or move a file directly?"></a>Why can’t we just rename or move a file directly?</h2><p>Sure, renaming or moving a file can be done simply via <code>mv</code> command or a few clicks in a IDE/Editor, but there are a few downsides and potential risks.</p><p>For example, we have a repo with only one file <code>test.txt</code>, there are two commits in log.</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_git_repo.png" alt="repo"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_git_log.png" alt="repo log"></p><p>If we move the file using <code>mv</code> command, and make some change in the new file, <code>git status</code> would show the old file was deleted, new file was created. It looks perfectly normal, doesn’t it?</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_git_status.png" alt="git status"></p><p>Not quite, if we check the diff, e.g. <code>git diff</code>, you would only see new file was created, old file was deleted, there is no liason between the two, it’s not easy to find the actual code change, bug could be introduced without much attention.</p><p>Besides, between the commit #2 and #3, if someone just submitted a change on the old file, before you submit #3 you would need <code>git rebase</code> or <code>git merge</code>, then submit your commit as #4. But wait, how do you replicate the change on the old file to the new file you just created? Manual copy-paste with human-eye-checking? What if it’s a big change?</p><h2 id="How-to-make-this-right"><a href="#How-to-make-this-right" class="headerlink" title="How to make this right?"></a>How to make this right?</h2><p>You need <code>git mv</code>.</p><p>With this, git will help you to track the connection between the old and the new files.</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_git_mv_status.png" alt="git mv status"></p><p>Right now, the change is clearly presented in the diff.</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_git_mv_diff.png" alt="git mv diff"></p><p>If someone submitted the commit before you submit the new file, after the rebasing or merging, you should be able to see everything clearly, what file was deleted, what change was made by your teammate on the old file, what you just added in the new file, etc.</p><h2 id="To-sum-up"><a href="#To-sum-up" class="headerlink" title="To sum up"></a>To sum up</h2><p>Use <code>git mv</code> to rename or move a file, it helps to preserve the full history and prevent potential merge mistakes.</p><p>By the way, right now Git is smart enough to find the liason between the old and new files, even if it’s done via <code>mv</code> or from a IDE/Editor, it checks if the two files are sharing the majority parts or not.</p><p>However, it’s always safer by using <code>git mv</code>.</p>]]></content>
    
    <summary type="html">
    
      Use git mv to rename or move a file to preserve file update history and prevent merge mistakes.
    
    </summary>
    
    
      <category term="git" scheme="http://zpjiang.me/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>干货满满，环佛罗里达州深度自驾游攻略</title>
    <link href="http://zpjiang.me/2019/12/31/florida/"/>
    <id>http://zpjiang.me/2019/12/31/florida/</id>
    <published>2019-12-31T20:00:00.000Z</published>
    <updated>2021-05-21T05:52:47.918Z</updated>
    
    <content type="html"><![CDATA[<p>2019年末，我们完成了一场追着暴风雨的环佛罗里达自驾游！</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_florida_map.png" alt="2019 year end florida road trip in 13 days"></p><p>全程总共接近 2k miles，虽然很遗憾很多地方因为天气原因没去成，但这次行程总体够深入，够硬核！</p><p>这次旅行，我们看到了大象、犀牛、鳄鱼、海豚、珊瑚、各种海鱼和海鸟，尝试了沼泽地骑行、mangrove 丛林划直立桨板、近海浮潜、白沙滩捡贝壳，参观了各类名胜古迹诸如海明威的故居、杜鲁门小白宫、圣马科斯古城堡，深入游览了肯尼迪航天中心，瞻仰了阿波罗登月飞船、亚特兰蒂斯航天飞机、土星五号运载火箭、SpaceX发射基地，品尝了佛罗里达的海鲜大餐和美酒，以及最重要的，遇见了各种各样有趣的人！</p><p>废话不多说，以下是我们的详细行程，包括装备行李、具体行程、吃、住、行几个部分。</p><ul><li><a href="#装备-amp-行李">装备 &amp; 行李</a></li><li><a href="#具体行程">具体行程</a><ul><li><a href="#12-18-Fly-to-Orlando-MCO">12/18 Fly to Orlando (MCO)</a></li><li><a href="#12-19-Drive-to-Miami">12/19 Drive to Miami</a></li><li><a href="#12-20-超舒服酒店体验-迈阿密">12/20 超舒服酒店体验 @迈阿密</a></li><li><a href="#12-21-狂风暴雨中的西礁岛">12/21 狂风暴雨中的西礁岛</a></li><li><a href="#12-22-狂风暴雨中的西礁岛，again">12/22 狂风暴雨中的西礁岛，again</a></li><li><a href="#12-23-离开西礁岛，bye-bye">12/23 离开西礁岛，bye bye</a></li><li><a href="#12-24-深入大沼泽地的骑行">12/24 深入大沼泽地的骑行</a></li><li><a href="#12-25-比斯坎国家公园的海上活动">12/25 比斯坎国家公园的海上活动</a></li><li><a href="#12-26-看鳄鱼-amp-海豚，住那不勒斯">12/26 看鳄鱼 &amp; 海豚，住那不勒斯</a></li><li><a href="#12-27-佛罗里达西海岸的白沙滩，捡贝壳-amp-浮潜">12/27 佛罗里达西海岸的白沙滩，捡贝壳 &amp; 浮潜</a></li><li><a href="#12-28-住宿、威士忌和美食-圣奥古斯丁">12/28 住宿、威士忌和美食 @圣奥古斯丁</a></li><li><a href="#12-29-刻满历史沧桑的古城堡，圣马科斯堡">12/29 刻满历史沧桑的古城堡，圣马科斯堡</a></li><li><a href="#12-30-改写了人类历史的肯尼迪航天中心">12/30 改写了人类历史的肯尼迪航天中心</a></li></ul></li><li><a href="#行程中的吃饭">行程中的吃饭</a></li><li><a href="#行程中的住宿">行程中的住宿</a></li><li><a href="#自驾开车">自驾开车</a></li><li><a href="#写在最后">写在最后</a></li></ul><span id="more"></span><script>window.location = "https://blog.1pixel.cc/" + window.location.pathname;</script><p>Disclamer: 所有酒店、餐厅、活动均为个人推荐，我们没收过商家一分钱。</p><h2 id="装备-amp-行李"><a href="#装备-amp-行李" class="headerlink" title="装备 &amp; 行李"></a>装备 &amp; 行李</h2><p>这里的列出来的行李是单人份，男女可能略有不同，仅供参考。</p><ul><li>游泳/浮潜装备<ul><li>浮潜呼吸面罩</li><li>泳衣、速干衣（各两套）</li><li>拖鞋</li><li>大毛巾（后来在当地买的）</li></ul></li><li>衣服<ul><li>内衣内裤（7套）</li><li>长袜、短袜（7双）</li><li>短袖、长袖（7+件）</li><li>外套（1件）</li><li>短裤（2件）</li><li>长裤（2条）</li></ul></li><li>卫生健康用品<ul><li>牙刷、牙膏、牙线</li><li>化妆包</li><li>面霜、面油、面膜</li><li>眼镜 &amp; 隐形眼镜</li></ul></li><li>电子设备<ul><li>笔记本、手机、手表</li><li>GoPro、Insta 360 X</li><li>所有设备的充电器</li></ul></li><li>MISC 其它<ul><li>太阳眼镜</li><li>鸭舌帽、草帽</li><li>运动鞋（2双）</li><li>护照、驾照、国家公园年卡、各类高端信用卡、机场休息室卡</li><li>现金（40刀）</li></ul></li></ul><h2 id="具体行程"><a href="#具体行程" class="headerlink" title="具体行程"></a>具体行程</h2><h3 id="12-18-Fly-to-Orlando-MCO"><a href="#12-18-Fly-to-Orlando-MCO" class="headerlink" title="12/18 Fly to Orlando (MCO)"></a>12/18 Fly to Orlando (MCO)</h3><p>飞一天，晚上到达奥兰多，取车，临时住一晚机场附近酒店 Best Western Gateway Orlando Hotel，neat and clean，还有会员小礼物。</p><h3 id="12-19-Drive-to-Miami"><a href="#12-19-Drive-to-Miami" class="headerlink" title="12/19 Drive to Miami"></a>12/19 Drive to Miami</h3><p>早上开车前往迈阿密，由于天气原因，城市旅游项目取消。上午逛动物园；中午第一次尝试秘鲁菜，种草；下午去迈阿密 duck tour，水陆两用车，带讲解员，天气恶劣，体验不是很好。</p><p>晚上入住 1 Hotel South Beach，著名小红书网红酒店，房间升级，酒店晚餐+酒吧很赞，晚上逛 ARTECHOUSE museum。</p><blockquote><p><a href="/2019/12/19/miami/">迈阿密两日游上篇 - 酒店、美食和 Artechhouse博物馆</a></p></blockquote><h3 id="12-20-超舒服酒店体验-迈阿密"><a href="#12-20-超舒服酒店体验-迈阿密" class="headerlink" title="12/20 超舒服酒店体验 @迈阿密"></a>12/20 超舒服酒店体验 @迈阿密</h3><p>由于天气异常恶劣，我们的一天从早上7点的瑜伽课开始，超丰盛的酒店早餐、奢华的楼顶酒吧游泳池、沙滩泳池、4pm checkout，之后开车前往美丽的西礁岛。</p><blockquote><p><a href="/2019/12/20/miami-2/">迈阿密两日游下篇 - 超舒服的酒店体验 @1 Hotel South Beach</a></p></blockquote><h3 id="12-21-狂风暴雨中的西礁岛"><a href="#12-21-狂风暴雨中的西礁岛" class="headerlink" title="12/21 狂风暴雨中的西礁岛"></a>12/21 狂风暴雨中的西礁岛</h3><p>天气异常糟糕，暴雨接连不断，所有出海的游玩项目都被取消。</p><p>中午天气稍有转好，我们前往 Duval Street 旅游一条街刷景点，依次去了杜鲁门小白宫 The Harry Truman’s Little White House、美国大陆最南点 The Southernmost Point、海明威故居 The Ernest Hemingway Home and Museum。</p><p>傍晚时分，我们临时预订了出海看日落的帆船（看不见太阳的日落帆船 ⛵️），酒水无限续杯。</p><blockquote><p><a href="/2019/12/21/key-west-in-rain/">狂风暴雨中的西礁岛 Key West - 上篇</a></p></blockquote><h3 id="12-22-狂风暴雨中的西礁岛，again"><a href="#12-22-狂风暴雨中的西礁岛，again" class="headerlink" title="12/22 狂风暴雨中的西礁岛，again"></a>12/22 狂风暴雨中的西礁岛，again</h3><p>唉，上午依然是狂风暴雨，趁雨变小我们去了几个市内景点，蝴蝶🦋馆 Butterfly and Nature Conservatory、1号公路终点 Mile 0 Marker，以及胡吃海喝 @Half Shell Raw Bar。</p><blockquote><p><a href="/2019/12/22/key-west-in-rain-2/">狂风暴雨中的西礁岛 Key West - 下篇</a></p></blockquote><h3 id="12-23-离开西礁岛，bye-bye"><a href="#12-23-离开西礁岛，bye-bye" class="headerlink" title="12/23 离开西礁岛，bye bye"></a>12/23 离开西礁岛，bye bye</h3><p>整个西礁岛之行充满了遗憾，上午吃完早饭，我们驶出西礁岛，途中经过 Bahia Honda State Park，草草解决了午饭，看不少人在沙滩嬉戏。</p><p>这是极度郁闷的一天，我们依然对西礁岛恶劣的天气耿耿于怀，游记没写。</p><p>晚上住 Homestead Best Western Gateway to the Keys，因为时间充足，我们去附近 outlets 还逛了逛，买了件超靓的 Nike Hoodie，晚上吃到了一家 Yelp 全五星，2017/2018/2019 都是全国 Top 10 的一家牙买加/加勒比海菜 Yardie Spice，好吃到爆！</p><p>因为我们去的有点晚，没有吃到他们的必点菜 Jerk Chicken。老板娘赶紧打电话给她老公，嘱咐了很多遍，明天一定要准备。第二天圣诞节前夜，开着的餐厅不多，我们二次光顾，老板一下子便认出我们了，说今天鸡翅有很多！</p><p>必点菜，Jerk Chicken Wing，我老婆最爱的菜 Curry Goat（也是老板娘最爱），我最爱的菜 Oxtail。</p><p>重要事情说三遍，一定要去，一定要去，一定要去！</p><h3 id="12-24-深入大沼泽地的骑行"><a href="#12-24-深入大沼泽地的骑行" class="headerlink" title="12/24 深入大沼泽地的骑行"></a>12/24 深入大沼泽地的骑行</h3><p>似乎自从吃了 Yardie Spicy，我们整个行程的运气开始好转！</p><p>一大早，我们去参加了大沼泽地国家公园的骑行 program，加上我们一共五个人，深入大沼泽地，蹚着沼泽地的积水骑行，听志愿者老爷爷给我们绘声绘色地讲解公园的历史、动物的迁徙、植物的更新换代、生物物种的入侵、大自然生态圈的脆弱。特别长知识！</p><p>后来，我们又开车去了 Flamingo Visitor Center，看到了更多的水鸟和 Manatee。</p><p>大约下午两点，我们火速赶往迈阿密沙滩附近，趁着天好坐了 Jet boat，体验了一把海上漂移的刺激。</p><p>晚上继续入住 Homestead 的 Best Western。小插曲，因为忘记房卡，去酒店前台时居然遇到了初高中同学，Lu Xuan！真是好久好久没见，没想到会在美国这穷乡僻壤相遇！</p><blockquote><p><a href="/2019/12/24/everglades/">大沼泽地国家公园 Everglades NP - 深入沼泽地骑行</a></p></blockquote><h3 id="12-25-比斯坎国家公园的海上活动"><a href="#12-25-比斯坎国家公园的海上活动" class="headerlink" title="12/25 比斯坎国家公园的海上活动"></a>12/25 比斯坎国家公园的海上活动</h3><p>上午九点，我们赶到比斯坎国家公园，天气晴朗，心情大好！这是非常硬核的一天，我们体验了划直立桨板、海中浮潜，看到了小海龟、海参（sea cucumber）、水母（jelly fish）。</p><p>玩结束后，我们酒店换到 Four Points by Sheraton Miami，后一天要去佛罗里达西海岸，酒店设施很新，推荐。晚上我们在 MesaMar Seafood Table 吃（圣诞夜，好多店不开门），我们到的时候没几桌人，还担心选错店，结果点了 Ceviche 和意面都好吃到哭。在我们快走时，饭店已经坐满了人！我们看到不少桌都点了/在问一整条鱼的那道菜，后来搜Yelp才发现这才是这家店的经典菜，下次一定再来！</p><p>这是完美的一天，国家公园的攻略看：</p><blockquote><p><a href="/2019/12/25/biscayne/">佛罗里达比斯坎国家公园 Biscayne NP 划直立板 &amp; 浮潜</a>。</p></blockquote><h3 id="12-26-看鳄鱼-amp-海豚，住那不勒斯"><a href="#12-26-看鳄鱼-amp-海豚，住那不勒斯" class="headerlink" title="12/26 看鳄鱼 &amp; 海豚，住那不勒斯"></a>12/26 看鳄鱼 &amp; 海豚，住那不勒斯</h3><p>从酒店 checkout，我们一路向西，开到大沼泽地国家公园的另一分支，在 Shark Valley 看鳄鱼，从 Gulf Visitor Center 出海看海豚。</p><p>话不多说，具体行程看攻略 <a href="/2019/12/26/everglades-2/">大沼泽地国家公园 Everglades NP - 鳄鱼 &amp; 海豚</a>。</p><p>晚上，我们一路向北，开到一座小城市那不勒斯，住在 Airbnb 一位老奶奶家，干净、温馨的小屋，推荐！</p><p>晚餐，我们在 Naples Downtown 附近吃了一家秘鲁菜 La Cuisine Peruvian Restaurant，也许同样是因为节日，餐厅只有我们一桌。大厨亲自为我们推荐菜单，吃了四道海鲜，味道出乎意料的好，价格亲民，最后充满惊喜的甜点，为我们结婚四周年留下了难忘的回忆。这家店，推荐！</p><p>详细游记：</p><blockquote><p><a href="/2019/12/26/naples/">佛罗里达那不勒斯 Naples 住宿 &amp; 美食</a>。</p></blockquote><h3 id="12-27-佛罗里达西海岸的白沙滩，捡贝壳-amp-浮潜"><a href="#12-27-佛罗里达西海岸的白沙滩，捡贝壳-amp-浮潜" class="headerlink" title="12/27 佛罗里达西海岸的白沙滩，捡贝壳 &amp; 浮潜"></a>12/27 佛罗里达西海岸的白沙滩，捡贝壳 &amp; 浮潜</h3><p>离开老奶奶家，我们继续向北，来到美丽的萨尼贝尔岛。</p><p>相比迈阿密、奥兰多这些大城市，萨尼贝尔岛更像是当地人更喜爱的度假胜地，美国当地人很多，外州/外国游客更少，地方不大，但景色超赞！</p><p>佛罗里达的把沙滩，沙粒细腻，海水清澈，海岸大陆坡宽敞平坦，特别适合浮潜、捡贝壳。具体攻略见</p><blockquote><p><a href="/2019/12/27/sanibel/">佛罗里达萨尼贝尔岛 Sanibel Island 沙滩捡贝壳</a></p></blockquote><p>晚上，我们继续向北开，住在 West Wing Hotel, 干净程度一般，设施一般，早饭也很一般，节日期间游客很多，酒店价格偏高，这家性价比还可以。后来，我们发现 Sarasota 那边住宿可能更方便，酒店选择也更多。</p><p>晚餐，这值得我们单独写一篇游记，吃的超级棒，价格亲民，喝酒的 vibe 很不错，跟一位纽约过来度假的大叔聊得很开心，天南海北侃大山。这家推荐！</p><blockquote><p><a href="/2019/12/27/longboat/">佛罗里达长船礁美食 Dry Dock Waterfront Grill</a></p></blockquote><h3 id="12-28-住宿、威士忌和美食-圣奥古斯丁"><a href="#12-28-住宿、威士忌和美食-圣奥古斯丁" class="headerlink" title="12/28 住宿、威士忌和美食 @圣奥古斯丁"></a>12/28 住宿、威士忌和美食 @圣奥古斯丁</h3><p>离开 Tampa，我们绕佛罗里达的这一大圈开始合拢，我们横穿了佛罗里达半岛，来到这座美丽古老的小镇，圣奥古斯丁。</p><p>到的当天，我们就被这座小镇的热闹程度给吓住了，著名景点圣马科斯古城堡附近根本没有办法停车，堵出xiang 💩。后来我们调整计划，先去 Airbnb check in，后来逛了当地著名的酿酒厂，St Augustine Distillery，全方位体验了蒸馏酒波本威士忌、伏特加、杜松子酒等，超赞，推荐。</p><p>吃饭的地方 Ice Plant Bar，就在酿酒厂隔壁，这几天来吃得最不开心的一家，被恶心坏了，具体原因参考游记。</p><p>For God’s sake, please DO NOT GO TO this terrible place for dinner, Ice Plant Bar!</p><p>回到住的地方，Airbnb 的 host 是一对非常 nice 的退休夫妇，他们的 house 也装扮地很用心，跟老爷爷老奶奶相聊甚欢。这次旅行，跟不同背景的人聊天，是非常开心的体验！</p><blockquote><p><a href="/2019/12/28/st-augustine/">佛罗里达圣奥古斯丁 St Augustine - 住宿、威士忌和美食</a>。</p></blockquote><h3 id="12-29-刻满历史沧桑的古城堡，圣马科斯堡"><a href="#12-29-刻满历史沧桑的古城堡，圣马科斯堡" class="headerlink" title="12/29 刻满历史沧桑的古城堡，圣马科斯堡"></a>12/29 刻满历史沧桑的古城堡，圣马科斯堡</h3><p>这是全美最古老的一座城堡，最早由西班牙殖民军队于1672年建造，几经摧残和重建，现在是美国国家公园体系的一部分，对外开放。</p><p>在圣马科斯古堡，我们有幸从两个不同的角度近距离观看了加农炮的发射表演，堪称震撼！更多关于这座城堡的历史、图片，请参考游记：</p><blockquote><p><a href="/2019/12/29/st-augustine-2/">佛罗里达圣奥古斯丁 Castillo de San Marcos 古城堡</a>。</p></blockquote><p>约莫中午时分，我们离开圣奥古斯丁，前往我们旅程的最后一段，肯尼迪航天中心！</p><p>当晚，我们住在航天中心附近的 TownePlace Suites by Marriott，酒店很新，干净，早饭非常棒，毕竟是 Marriott 旗下连锁酒店，去 KSC 玩强烈推荐这家。</p><h3 id="12-30-改写了人类历史的肯尼迪航天中心"><a href="#12-30-改写了人类历史的肯尼迪航天中心" class="headerlink" title="12/30 改写了人类历史的肯尼迪航天中心"></a>12/30 改写了人类历史的肯尼迪航天中心</h3><p>相信很多人小时候学到这些航天史时，心中都会萌发出航天梦。这次参观了肯尼迪航天中心，深刻体会到了人类的渺小，我们要对科学、技术和太空心存敬畏之心。一代又一代的科学家、工程师、航天员，用他们的青春、才华、孜孜不倦，谱写了人类探索太空这部漫长的乐章！</p><p>肯尼迪航天中心适合两天游玩，其中有几个属于必玩/必看项目，比如阿波罗/土星五号发射中心的 bus tour，还有亚特兰蒂斯馆珍藏的亚特兰蒂斯航天飞机，这些都是实物，亲眼目睹的感受只能用一个词来形容，震撼！</p><p>具体游玩攻略，请参考：</p><blockquote><p><a href="/2019/12/30/ksc/">佛罗里达肯尼迪航天中心两日游攻略</a>。</p></blockquote><h2 id="行程中的吃饭"><a href="#行程中的吃饭" class="headerlink" title="行程中的吃饭"></a>行程中的吃饭</h2><p>总的来说，这次出来玩吃饭上躺坑较少，相比加州（尤其是北加），佛罗里达吃饭的物价很亲民，海鲜选择很多，喝酒性价比也很高，佛罗里达真是退休的好地方！</p><p>由于是自驾游，难免在路上得靠快餐解决，subway 和金拱门都还不错，顿顿去餐厅吃正餐也不太现实。这里总结了几条吃饭的建议：</p><ul><li>Yelp 上的评分大部分时候不会出错，Google 对餐厅评分的功能也越做越好</li><li>节日期间，最好先跟餐厅电话联系是否正常营业</li><li>点菜时，Yelp 上的图片不一定在最新的菜单中，不要害怕问服务员</li><li>秘鲁菜一定要试一下</li></ul><h2 id="行程中的住宿"><a href="#行程中的住宿" class="headerlink" title="行程中的住宿"></a>行程中的住宿</h2><p>这次旅行，我们住宿的酒店各式各样，有毗邻沙滩富豪聚集的高档网红酒店，也有犄角旮旯穷乡僻壤的连锁小旅馆，很多时候不只是单纯为了省钱，而是要看行程安排和游玩路线，是时间、距离、价格、安全、评价等多种 metrics 之间权衡后的最优解。几点建议：</p><ul><li>在大城市，高档酒店的服务更加贴心，强烈推荐 Amex 白金卡，FHR 常有惊喜</li><li>在穷乡僻壤，尽量选择评价较好的连锁酒店，好点的如 Marriott，次一些的有 Best Western，Holiday Inn 之类</li><li>尽量选择较新的酒店</li><li>稍微好点的酒店，记得看有没有停车费、resort fee，有没有早餐</li><li>酒店、吃饭，用 Uber 信用卡有 3X cash back，不过 Chase 不定期有 10% 的 deal</li><li>Airbnb 很多时候不失为一项好选择，选 superhost 一般不会出错</li><li>Location, location, location! 重要的事情说三遍！</li></ul><h2 id="自驾开车"><a href="#自驾开车" class="headerlink" title="自驾开车"></a>自驾开车</h2><p>在去佛罗里达前，我就说一定要开辆敞篷小跑，于是在机场，我们挑了辆敞篷野马 Mustang。谁知道，整个自驾游中，我们见到了无数敞篷野马，😂😂😂</p><p>在佛罗里达，高速的最高限速是70。我们因为年中在去黄石的路上吃了两张超速罚单（开着 Camaro），这次开车尤其小心，一路上见到了无数警察路边 pull over，所以一直保持着警觉。说实话，我也不知道佛罗里达警察抓人的判断标准是什么，我如果完全按照限速开，估计会是整条高速上最慢的一辆。几点建议：</p><ul><li>去西礁岛 Keywest 那条高速一定要按照限速开！</li><li>那条高速上有些路段白天晚上限速不同，注意看路牌，我们沿途看到无数被 pull over 的车</li><li>如果完全按照限速开太慢，超个 5 mile/h 应该不至于被抓</li><li>如果开太慢后面的车逼太紧，淡定些，能让后车超过去就让一让，我亲眼见到超我车后被警察 pull over 了</li><li>在外州开车，超速后上庭很麻烦，律师费不便宜，一般都是吃瘪，罚单小几百块还好，保险说不定来年也会跟着涨</li><li>任何时候，开车注意安全，不要赌气驾驶</li></ul><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>整个佛罗里达的行程，最想感谢的人是我老婆，从提前三四个月开始策划，老婆不知道花了多少个日夜，在家查各种各样的攻略、定 tour、打电话，总是希望我们的行程能够万无一失，凡事皆完美。更大部分人相比，我们玩的方式更加 active，老婆开玩笑说，光看中文的攻略还不够，还得再看看英文的，那些去做个船听导游讲解的 tour 我应该提不起什么兴趣。记得有好几个晚上，老婆说因为行程的事情她担心得睡不着。谁知世事难料，佛罗里达的天气变化莫测，还好老婆之前准备充分，行程中灵活变通，我们这次自驾游才不至于完全在暴雨中泡汤。<strong>辛苦了，老婆！</strong></p><p>旅游结束，这是我第一次把所有的行程用文字的方式整理记录下来，游记一共 14 篇，每篇从整理行程、图片、视频，到打草稿，成文，发布，再到做 SEO，<a href="https://zpjiang.me/2019/12/28/iphone-image-rotation/">fix 博客图片的 bug</a>，<a href="https://zpjiang.me/2020/01/15/let-baidu-index-github-page/">国内站做镜像站点</a>，<a href="https://zpjiang.me/2020/01/15/let-baidu-index-github-page/#%E6%9C%89%E6%B2%A1%E6%9C%89%E7%AE%80%E5%8D%95%E5%8F%AF%E9%9D%A0%E8%BF%98%E5%85%8D%E8%B4%B9%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%9F">DNS 和 CDN 性能调优</a>，微信公众号、微博、知乎、马蜂窝异步发布，前后也是花了无数时间和心思。</p><p>之所以投入这么大的力气，倒不是为了赶时髦做网红，这是我们对自己20多岁这十年的青春的纪念！时光荏苒，人一生中最充满活力的十年就要跟我们说再见了，看到朋友圈不少同龄人发年终总结，我想，我们的生活不应该只有工作，我应该找一种方式，把我们生活中最精彩绚丽的部分记录下来。多年之后，当我们回头看当初写下的这些稚嫩文字，也许还能体会到年轻时候的那一腔热情与无谓。</p><p>再见，给我们这最美丽的十年。</p>]]></content>
    
    <summary type="html">
    
      史上最强干货，两周时间，环佛罗里达州深度自驾游，看到了各种珍稀动物，游览了各类名胜古迹，战胜了内心恐惧变得更加自信，瞻仰了航天历史伟绩和前沿科技，体验了别样的风土人情。
    
    </summary>
    
    
      <category term="trip_2019_ye" scheme="http://zpjiang.me/tags/trip-2019-ye/"/>
    
  </entry>
  
  <entry>
    <title>肯尼迪航天中心两日游攻略 - 航天飞机 &amp; 火箭</title>
    <link href="http://zpjiang.me/2019/12/30/ksc/"/>
    <id>http://zpjiang.me/2019/12/30/ksc/</id>
    <published>2019-12-30T20:00:00.000Z</published>
    <updated>2021-05-21T05:52:47.918Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_ksc_atlantis3.jpg" alt="Atlantis"></p><p>佛罗里达行程的最后一段，我们来到了肯尼迪航天中心 Kennedy Space Center。与其说是航天中心，不如把这里当作以科普为主的航天科技主题乐园 😂。</p><p>如果你是科技迷，或者对航天、天体物理感兴趣，这座主题乐园绝对不容错过，里面你是可以看到真的火箭 🚀 、卫星 🛰️ 和航天飞船 🛫 的！</p><span id="more"></span><script>window.location = "https://blog.1pixel.cc/" + window.location.pathname;</script><h2 id="整体行程"><a href="#整体行程" class="headerlink" title="整体行程"></a>整体行程</h2><p>官方有一份游玩推荐，可以根据游玩时间，是否跟家人一起来决定：<a href="https://www.kennedyspacecenter.com/info/itineraries">SUGGESTED ITINERARIES</a>。</p><p>我们的游玩顺序大致如下图：</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_ksc_tour.png" alt="KSC tour"></p><p>第一天：</p><ul><li>Rocket Garden tour</li><li>Eyes on the Universe: NASA’s Space Telescopes</li><li>Journey To Mars: Explorers Wanted</li><li><strong>Space Shuttle Atlantis with Shuttle Launch Experience （必玩）</strong></li><li>Science on a Sphere</li><li><strong>IMAX Theater 3D Space Film（必看）</strong></li></ul><p>第二天：</p><ul><li><strong>Kennedy Space Center Explore Bus Tour, including Apollo/Saturn V Center（必玩）</strong></li><li><strong>Heroes &amp; Legends featuring the U.S. Astronaut Hall of Fame presented by Boeing（必看）</strong></li></ul><h2 id="停车、吃饭和门票"><a href="#停车、吃饭和门票" class="headerlink" title="停车、吃饭和门票"></a>停车、吃饭和门票</h2><p>我们第一天下午两点多到，远远就能看到高耸的航天飞机模型。停车场分 A/B/C/D/…区，停车票一天10刀。</p><p>因为我们计划玩两天，所以买了多日票（之后可以免费更换年票，并且每人附送一次停车票，所以我们第二天停车票就免了）。就我们对于航天科技的喜好程度来说，玩两天足够了。除了日常参观，如果有特殊的event，比如2月份会有 ULA Atlas V Solar Orbiter 发射，公园的安排会略有不同。</p><p>对于吃饭，公园内有不少餐厅，还有 Starbucks，日常快餐如汉堡、薯条、热狗、沙拉一应俱全。进园时会查包，但是饮用水、食物可以带进去。</p><h2 id="Space-Shuttle-Atlantis-with-Shuttle-Launch-Experience"><a href="#Space-Shuttle-Atlantis-with-Shuttle-Launch-Experience" class="headerlink" title="Space Shuttle Atlantis with Shuttle Launch Experience"></a>Space Shuttle Atlantis with Shuttle Launch Experience</h2><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_ksc_atlantis.jpg" alt="Atlantis"></p><p>这座场馆一共三层，tour 是从三楼开始，具体参观形式就不剧透了，内有 Atlantis 退役航天飞机实物，非常震撼！作为游客，我的建议是一定要去，队伍很长，游客是一批一批地被放进去。里面有一些发射体验的program，跟一些游乐场里的 4D 体验差不多，值得一试，里面有免费寄存背包的地方。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_ksc_atlantis2.jpg" alt="Atlantis"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_ksc_atlantis3.jpg" alt="Atlantis"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_ksc_atlantis4.jpg" alt="Atlantis"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_ksc_atlantis5.jpg" alt="Atlantis"></p><p>参观的顺序是从上往下，二楼有模拟发射的 program，可以“体验”一把发射时的加速度和旋转。玩之前，工作人员有很多提醒，program 可能会引起不适，实际体验后我觉得跟游乐场里的 4D 体验差不太多，甚至可能更轻松一些。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_ksc_astronaut.jpg" alt="Rocket Garden"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_ksc_atlantis_launch.jpg" alt="Atlantis"></p><p>下到一楼，那里有有很多纪念馆，讲述了航天飞机历史上发生的事故，下图是哥伦比亚号遇难后的残骸。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_ksc_columbia.jpg" alt="Columbia disaster"></p><p>航天飞机家族族谱：</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_ksc_family_tree.jpg" alt="Family tree of space shuttles"></p><h2 id="Apollo-Saturn-V-Center-Bus-Tour"><a href="#Apollo-Saturn-V-Center-Bus-Tour" class="headerlink" title="Apollo/Saturn V Center Bus Tour"></a>Apollo/Saturn V Center Bus Tour</h2><p>这应该是整个 Space Center 里最火的项目，早上9点开园，我们9点30到，已经需要排队45分钟，据工作人员说，队伍长的时候需要等2+小时。该 Bus tour 会把我们带出 Space Center，一路经过 The Vehicle (originally Vertical) Assembly Building（又称 VBA ），SpaceX 发射中心，观看 Shuttle 运输机，几座发射台等。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_ksc_spacex.jpg" alt="SpaceX Launch Platform"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_ksc_launch_platform.jpg" alt="SpaceX Launch Platform"></p><p>最终，bus 会把我放在阿波罗/土星五号发射中心。进去之后，会有发射中心的参观，以及重头戏：土星五号的实物！</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_ksc_saturn.jpg" alt="Saturn V Launch Center"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_ksc_saturn2.jpg" alt="Saturn V Launch Center"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_ksc_saturn3.jpg" alt="Saturn V Launch Center"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_ksc_saturn4.jpg" alt="Saturn V Launch Center"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_ksc_launch_center.jpg" alt="Saturn V Launch Center"></p><p>如此庞然大物，相当震撼！</p><p><strong><em>更多完整版佛罗里达自驾游攻略，请参考 <a href="/2019/12/31/florida/">干货满满，环佛罗里达州深度自驾游攻略</a>。</em></strong></p>]]></content>
    
    <summary type="html">
    
      佛罗里达行程最后一段，肯尼迪航天中心 Kennedy Space Center，参观了阿波罗、土星五号中心，亚特兰蒂斯号航天飞机、火箭等。
    
    </summary>
    
    
      <category term="trip_2019_ye" scheme="http://zpjiang.me/tags/trip-2019-ye/"/>
    
  </entry>
  
  <entry>
    <title>佛罗里达圣奥古斯丁 Castillo de San Marcos 古城堡</title>
    <link href="http://zpjiang.me/2019/12/29/st-augustine-2/"/>
    <id>http://zpjiang.me/2019/12/29/st-augustine-2/</id>
    <published>2019-12-29T20:00:00.000Z</published>
    <updated>2021-05-21T05:52:47.918Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>藤蔓植物 爬滿了伯爵的墳墓<br>古堡裡一片荒蕪 長滿雜草的泥土<br>不會騎掃把的胖女巫 用拉丁文念咒語啦啦嗚</p><p><em>《威廉古堡》  周杰伦</em></p></blockquote><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_castillo.jpg" alt="A corner of Castillo de San Marcos"></p><span id="more"></span><script>window.location = "https://blog.1pixel.cc/" + window.location.pathname;</script><p>浓雾渐渐散开的小镇，淅沥沥的小雨连绵不绝。</p><p>一大早，我们避开游客高峰，径直来到位于圣奥古斯丁的圣马科斯古城堡 Castillo de San Marcos。</p><h2 id="关于-Castillo-de-San-Marcos"><a href="#关于-Castillo-de-San-Marcos" class="headerlink" title="关于 Castillo de San Marcos"></a>关于 Castillo de San Marcos</h2><p>圣马科斯堡始建于 1672 年，当初佛罗里达还是西班牙帝国的殖民地（Spanish Empire），后来几经战乱，古堡也是经历了多次摧残和翻修。</p><ul><li>1763 年，英国人获得了这个地方的控制权，圣奥古斯丁也变成了英属东佛罗里达的首都，这座古堡被命名为 St. Mark 古堡。</li><li>1783 年，鉴于巴黎和平协议 （Peace of Paris），古堡归还给西班牙，古堡又被重新命名为圣马科斯古堡。</li><li>1821 年，美国自由战争，西班牙将这座城堡移交给美国人，至此，该古堡正式改姓“美利坚”，改名 Fort Marion，为了纪念独立战争英雄 Francis Marion。</li><li>1933 年，古堡不再作为军事设施，转由美国国家公园接手，古堡又恢复原名，圣马科斯堡。</li></ul><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_castillo_histoire.jpg" alt="History Castillo de San Marcos"></p><p>这座美国境内最古老的城堡，见证了美利坚这片广袤土地的岁月变迁与沉浮。</p><h2 id="古堡布局"><a href="#古堡布局" class="headerlink" title="古堡布局"></a>古堡布局</h2><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_castillo_map.png" alt="Castillo de San Marcos"></p><p>从 Google Map 上俯瞰，整座古堡呈几何对称四边形，外墙为对称八边形，远远看过去非常壮观。</p><p>进入古堡时，我们先穿过外墙，因为古堡现在隶属美国国家公园，所以我们的国家公园通票又派上了用场，单买门票15刀，7天有效，具体可以参考官网 <a href="https://www.nps.gov/casa/planyourvisit/feesandreservations.htm">Fees &amp; Reservations</a>。换好门票，我们会拿到一份导览小册子，其电子版可从官网下载，电子版 <a href="https://www.nps.gov/casa/planyourvisit/upload/CASA_Online.pdf">Brochures</a>。</p><h2 id="古堡墙外"><a href="#古堡墙外" class="headerlink" title="古堡墙外"></a>古堡墙外</h2><p>进入古堡，我们沿着逆时针的方向游览，走到半路，突然看到前方聚集了好多人，仔细一看，原来是我们赶上了整点的火炮发射演示。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_castillo_demo.jpg" alt="Weapons demonstrations in Castillo de San Marcos"></p><p>在加农炮发射的那一刻，震耳欲聋的炮轰声惊起了一旁休憩的海鸟，也着实让我吓了一跳。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/lu69esFoUN8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>看完发射，我们继续沿着城墙外的小道散步。据小册子上讲，这里的城墙曾就地取材，海里的贝壳便是材料之一，坚固耐用。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_castillo_wall.jpg" alt="Walls in Castillo de San Marcos"></p><p>城堡主体外，是一圈沟渠，在战争时期可以放海水进来，起到抵御敌军的作用。据一旁开玩笑的游客说，草地长这么好，说不定以前的士兵也会放羊进去吃点草。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_castillo_wall2.jpg" alt="Walls in Castillo de San Marcos"></p><h2 id="古堡城内"><a href="#古堡城内" class="headerlink" title="古堡城内"></a>古堡城内</h2><p>经过一座古老的木桥，我们便进入了古堡。右手边，是士兵们就寝的房间，简易的木床，铺上麻布制成的棉被，无法想象，两三百年前的战乱时期，寒冷的雨夜，士兵们只能蜷缩在这闭塞狭小的房间内，靠着这壁炉取暖。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_castillo_room.jpg" alt="Castillo de San Marcos"></p><p>穿过大堂，我们到了古堡正中央。古堡不大，有上下两层。一层类似于北京的四合院，分别分布着议事厅、食堂、兵器库、牢房，等。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_castillo_park.jpg" alt="Castillo de San Marcos"></p><p>逛了一圈，我们沿着楼梯上了二楼。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_castillo_stairs.jpg" alt="Castillo de San Marcos"></p><h2 id="古堡天台"><a href="#古堡天台" class="headerlink" title="古堡天台"></a>古堡天台</h2><p>一登楼，眼前突然变得开阔起来。古堡的四周，布满了青铜火炮。走近看，炮筒上火药留下的斑驳清晰可见。据 ranger 介绍，这些加农炮可以击中 1 mile 以内的目标。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_castillo_artillery.jpg" alt="Castillo de San Marcos"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_castillo_artillery2.jpg" alt="Castillo de San Marcos"></p><p>古城堡的四个瞭望角，修修补补的城墙上依然留有炮火残留的印记。</p><p>就在我们四处闲逛时，恰好又赶上了另一场加农炮发射仪式，于是我们又拍了这一段视频，里面包括了士兵（后来得知，他们均是由志愿者扮演）行礼、检查炮筒、点火发射的具体细节。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_castillo_artillery3.jpg" alt="Cannon firing in Castillo de San Marcos"></p><iframe width="560" height="315" src="https://www.youtube.com/embed/4llorpYt6SU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>细心的人可能会发现，这一次的声音并没有之前那么响，其实这跟声音的传播方向以及传播空间有关（我的猜测）。火炮发射时，火药在炮筒有限的空间内爆炸，空气在极短的时间内被加热压缩，发生巨响的同时推着炮弹出膛，声波应该也主要沿着炮筒的方向传播，当然，同时也有一部分能量会向四周散开。当我们在城堡下时，由于城堡墙壁能起到回音壁的作用，反射的声波与原波频率接近，叠加致使振幅加强，所以人能够感觉到的声音就更响。与之相比，站在城墙上的人，既不是炮筒的传播方向，也不会因为空间反射产生的声波叠加，所以听觉上并没有那么震撼。</p><p>Anyway，最后，很开心的与扮演士兵的志愿者老爷爷合影。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_castillo_artillery5.jpg" alt="Cannon firing in Castillo de San Marcos"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_castillo_artillery4.jpg" alt="Cannon firing in Castillo de San Marcos"></p><h2 id="小结-amp-建议"><a href="#小结-amp-建议" class="headerlink" title="小结 &amp; 建议"></a>小结 &amp; 建议</h2><p>时间过得很快，仔细逛完古堡大概花了三个小时，一楼其实还有更为详细的历史背景介绍，我们赶时间就跳过了。</p><p>临走前，天上又飘起了小雨。这是我们在圣奥古斯丁的最后一站，拍一张门前路标留念。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_castillo_bye.jpg" alt="Castillo de San Marcos"></p><p>眼前的这座古堡，让我联想起巴塞罗那的 Montjuïc Castle。经历了几百年的风吹雨打，它们依然伫立在那儿，见证着朝代的更迭，默默地扮演者一座城的守护者。后世的我们，看着这些满载历史的古迹，应当牢记当今世界和平的来之不易。</p><p>小建议：</p><ul><li>早上刚开门的游客比较少，停车位也较多，下午两三点这附近就堵得水泄不通了</li><li>发生拥堵后，别再往城堡这个方向挤，附近居民区还是很空的，可以停好车步行过来</li><li>国家公园的 Annual Pass 别忘了</li><li>古堡内不定期会有不同的表演项目，到了之后先咨询 ranger</li></ul><p><strong><em>更多完整版佛罗里达自驾游攻略，请参考 <a href="/2019/12/31/florida/">干货满满，环佛罗里达州深度自驾游攻略</a>。</em></strong></p>]]></content>
    
    <summary type="html">
    
      佛罗里达行程第八段攻略，我们来到了美国最古老的小镇，圣奥古斯丁 St Augustine，前往拜访历史悠久的 Castillo de San Marcos 圣马科斯古城堡。
    
    </summary>
    
    
      <category term="trip_2019_ye" scheme="http://zpjiang.me/tags/trip-2019-ye/"/>
    
  </entry>
  
  <entry>
    <title>佛罗里达圣奥古斯丁 St Augustine - 住宿、威士忌和美食</title>
    <link href="http://zpjiang.me/2019/12/28/st-augustine/"/>
    <id>http://zpjiang.me/2019/12/28/st-augustine/</id>
    <published>2019-12-28T20:35:00.000Z</published>
    <updated>2021-05-21T05:52:47.918Z</updated>
    
    <content type="html"><![CDATA[<p>离开西海岸的<a href="http://blog.1pixel.cc/2019/12/27/sanibel/">沙滩</a>和<a href="http://blog.1pixel.cc/2019/12/27/longboat/">美食</a>，我们驱车横穿佛罗里达，来到这座刻满历史痕迹的古城，圣奥古斯丁。天气依旧扑簌迷离，这灰暗的色调，反倒给这座小镇披上了一件安静神秘的外衣。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_augustine_church.jpg" alt="St Benedict Catholic Church in St Augustine"></p><span id="more"></span><script>window.location = "https://blog.1pixel.cc/" + window.location.pathname;</script><h2 id="出发"><a href="#出发" class="headerlink" title="出发"></a>出发</h2><p>吃完早饭我们从 Tampa 出发，横穿佛罗里达，因为途中赶上美式足球比赛，75堵得特别厉害，我们在 Ocala 转40，沿着乡间小路横穿整个 Ocala National Forest 国家森林。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_augustine_map.png" alt="Driving from Tampa to St Augustine"></p><h2 id="抵达-St-Augustine"><a href="#抵达-St-Augustine" class="headerlink" title="抵达 St Augustine"></a>抵达 St Augustine</h2><p>下午三点左右，我们抵达 St Augustine 市区，按照计划，我们直奔 Castillo de San Marcos 圣马可斯城堡，然后就在还有 1 mile 左右的地方，一溜车已经排起了长队，纹丝不动。我们看了看 Google Map，全红。搜了附近几个停车场，绕到过去也都是全满。无奈之下，我们只能先去 Airbnb check in，城堡明天再来。</p><h3 id="Airbnb"><a href="#Airbnb" class="headerlink" title="Airbnb"></a>Airbnb</h3><p>我们预定的这家距离市中心其实很近，0.8 mile，步行大概 10 分钟，房主也是 Superhost，一对五六十岁的美国夫妇，人非常客气，带着我们看了一圈房子，他们住一楼，二楼是一间卧室，一间书房，洗手间，都是我们的，好爽！</p><p>环顾四周，墙上挂满了各式油画，家具、灯饰挑选也很用心，很有历史的味道，就连垃圾桶都那么文艺。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_augustine_airbnb2.jpg" alt="Airbnb in St Augustine"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_augustine_airbnb3.jpg" alt="Airbnb in St Augustine"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_augustine_airbnb.jpg" alt="Airbnb in St Augustine"></p><p>安顿好后，我们稍微聊了几句，原来夫妇俩都已经退休，老爷爷曾经是当地的 tour guide，人非常和善，脸上总是挂着笑容。我们说了旅行计划，老爷爷还特地拿了几副眼镜给我们，说晚上灯光表演的时候可以看到不一样的效果，sweet。</p><h3 id="St-Augustine-Distillery"><a href="#St-Augustine-Distillery" class="headerlink" title="St Augustine Distillery"></a>St Augustine Distillery</h3><p>从 Airbnb 走到酿酒厂差不多 5 分钟，<a href="https://www.tripadvisor.com/Attraction_Review-g34599-d6403479-Reviews-St_Augustine_Distillery-St_Augustine_Florida.html">St Augustine Distillery</a> 在 TripAdvisor 上推荐景点排第一位，我们到的时候，运气稍好，正好剩下两个人的位子，买到半小时后的票，今天其余时间都已售罄。就在我们准备付钱时，带队小姐姐笑着说，我们只要给她看下 ID，确认已满喝酒的年龄，门票不要钱。难怪这个景点这么热门，给酒喝，还不要门票。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_augustine_distillery.jpg" alt="St Augustine Distillery tickets"></p><p>进入厂区，带队小姐姐开始给我们讲这家蒸馏厂的历史。</p><p>早在 1907 年，这里原是 St. Augustine 的第一家供电厂和制冰厂，厂房里依然陈列这一台年代久远的制冰压缩机。正是因为制冰技术的快速发展，长途运输成为了可能，所以后来几年，这里还经营过水果和食物运输的生意。在美国，农业发达的地方除了加州，佛罗里达也是农业大州，这里雨水充沛，产出的水果非常甜。</p><p>再后来，为了促进当地农业发展，人们决定在这里开一座蒸馏厂，把当地生产的粮食直接酿出酒，既解决了内需，又能促进就业，同时还能赚酒水高额的利润，于是，St Augustine Distillery 就成立了。直到最近几年，酿酒的生意早已大不如前，当地为了保留这份历史，便开始了以这种 tour 的方式，向更多的人介绍蒸馏酒的知识，同时鼓励大家珍惜保护历史文化（在美国，一百多年的已经算老古董了）。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_augustine_distillery2.jpg" alt="St Augustine Distillery"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_augustine_distillery3.jpg" alt="St Augustine Distillery"></p><p>过了蒸馏间，我们来到了储酒间，一堆大木桶整齐的排列在架子上。经谷物发酵，蒸馏，得到威士忌原酒，其酒精度依照蒸馏厂的不同，介于60-70%之间。在这之后，便是 ageing 阶段，也就是将酒置于酒桶中放置数年。如果没有经过这道过程，那么威士忌将只会是很普通的蒸馏酒，而不会是这么神奇的传统艺术。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_augustine_distillery4.jpg" alt="St Augustine Distillery"></p><p>别小看了这木桶，这里面可大有文章。不同的木桶，最后成酒的风味很不一样，常见的酒桶有美国波本威士忌酒桶与西班牙雪莉酒桶，前者是以北美白橡木制造，后者则主要以欧洲橡木为材料。St Augustine 附近有家红酒酿酒厂，据说用过的红酒桶再装威士忌，最后成酒还会有一股葡萄香。</p><p>带队小姐姐讲了这么多，接下来将是最激动人心的环节，品酒！三轮鸡尾酒，加一轮经典 old fashioned，如果感兴趣，还可以要 straight shot！</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_augustine_cocktail.jpg" alt="Cocktail in St Augustine Distillery"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_augustine_cocktail2.jpg" alt="Cocktail in St Augustine Distillery"></p><p>这三轮鸡尾酒，其实是酿酒厂为了促销他们鸡尾酒原汁，通过 1:4 的比例兑相应的烈酒即可。</p><ul><li>第一轮，我们尝试了 Vodka + Mule，柠檬味，微微透着一丝甜味，Moscow Mule Cocktail；</li><li>第二轮，Bourbon + Tiki，是威士忌的味道，口感偏甜，可能糖浆放得有点多；</li><li>第三轮，Gin + Tonic，我觉得一般般，因为是调和酒，缺少了气泡带来的惊喜。</li></ul><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_augustine_cocktail3.jpg" alt="Cocktail in St Augustine Distillery"></p><p>喝完三轮，我又每种多喝了一杯，嗯，个人还是更喜欢 Mule。六杯 shot 下肚，感觉有些进入状态，我们的 tour 也快结束了。最后一个环节，大家被带到了 gift shop，带队小姐姐说，最近大促销，巴拉巴拉，原来还是为了卖酒，😁 😂 🤣</p><p>最后一轮，每个人一份 old fashioned shot，现调，非原汁勾兑。原本我以为会给我们喝下图中的那样，后来发现还是每人一个shot。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_old_fashioned.jpg" alt="Old fashioned"></p><p>我尝了一杯，果然还是我最喜欢的味道！因为最近是 holiday season，750ml 的威士忌，加两小份鸡尾酒原液，加两个威士忌酒杯，一个制冰模具，60刀。</p><p>我跟老板说，让我们再试试 bourbon 的 straight shot，我跟老婆一人一杯，一口闷。好家伙，下肚还没几秒，突然有种天旋地转、身体不受控的冲击感。我们接着跟老板聊了几句，觉得这优惠挺划算（喝开心了，就开始乱花钱），只不过后来想到没法带上飞机（还好，还有点理智），只能作罢。</p><h3 id="Ice-Plant-Bar"><a href="#Ice-Plant-Bar" class="headerlink" title="Ice Plant Bar"></a>Ice Plant Bar</h3><p>出了酒厂，天色已暗，喝得晕乎乎的我们，打算就在酿酒厂隔壁的餐厅 <a href="https://www.yelp.com/biz/the-ice-plant-st-augustine">Ice Plant Bar</a> 就餐。</p><p>前方预警，即将打开吐槽模式。</p><p>出来玩到现在，吃饭从来没躺坑，唯独这一晚，有种外地游客在旅游区被坑的感觉。生意火让我们等了一个多小时也就算了，坐进去后一刻钟才来问喝什么，点了菜之后一刻钟才送来酒水，再等二十分钟才上前菜，菜品一般般，意面没什么味道，pork 外面焦得发苦，里面油腻得无法下咽，就前菜的鸭腿还可以，旁边的梅子酱感觉就是超市一两块一大罐里倒出来。然而最不能忍的是，最后刷卡是默认给30%小费，你没看错，it’s fucking 30%! 如此之烂的服务，服务员就站在你面前，死死地盯着你，看着你给小费，it’s a RIPOFF!</p><p>后来看看 Yelp 上的评论，好评和差评分化的很严重，可能喝酒的 experience 更好一些，但是吃饭，还是算了吧。</p><p><span class="yelp-review" data-review-id="ZbQ6Ifwa4VZAFLxs1NkdwA" data-hostname="www.yelp.com">Read <a href="https://www.yelp.com/user_details?userid=s8oT6Vk7uRdSMx1WVmwkJQ" rel="nofollow noopener">Alexander G.</a>‘s <a href="https://www.yelp.com/biz/the-ice-plant-st-augustine?hrid=ZbQ6Ifwa4VZAFLxs1NkdwA" rel="nofollow noopener">review</a> of <a href="https://www.yelp.com/biz/KjufNAqJadkXmixFPp-7yw" rel="nofollow noopener">The Ice Plant</a> on <a href="https://www.yelp.com" rel="nofollow noopener">Yelp</a><script async="async" src="https://www.yelp.com/embed/widgets.js" type="text/javascript"></script></span></p><p><span class="yelp-review" data-review-id="ixxFfOTO5XKmR_IlvwYbMg" data-hostname="www.yelp.com">Read <a href="https://www.yelp.com/user_details?userid=KfvPkO6s2XKN81wZGYdKjw" rel="nofollow noopener">ZP J.</a>‘s <a href="https://www.yelp.com/biz/the-ice-plant-st-augustine?hrid=ixxFfOTO5XKmR_IlvwYbMg" rel="nofollow noopener">review</a> of <a href="https://www.yelp.com/biz/KjufNAqJadkXmixFPp-7yw" rel="nofollow noopener">The Ice Plant</a> on <a href="https://www.yelp.com" rel="nofollow noopener">Yelp</a><script async="async" src="https://www.yelp.com/embed/widgets.js" type="text/javascript"></script></span></p><h3 id="回到-Airbnb"><a href="#回到-Airbnb" class="headerlink" title="回到 Airbnb"></a>回到 Airbnb</h3><p>吃完饭，心情也不是很好，饭后消食迎着小雨散步回 Airbnb。打开门，发现老爷爷老奶奶也是刚刚吃完饭回来，看到房子里外都打开的圣诞装饰，感觉很温馨。</p><p>我们坐下来跟老俩接着唠嗑，得知原来他们一位小孩现在刚刚入职微软，而且正好是 Azure 云计算部门，顿时觉得很是亲切，老奶奶激动地拿出家里的 Azure 马克杯，明显能看出他们内心对孩子职业发展的自豪。</p><p>老俩问我们今天玩的怎么样，听说我们去了酒厂，老爷爷笑眯眯的从柜子里拿出了好几瓶，正好就是我们今天喝过的！老爷爷笑说，这附近酿酒厂的酒他们都喝过，都爱喝，不光是烈酒，葡萄酒他们也喜欢。正说着，老爷爷给我们各自倒了一点葡萄酒，一定要让我们尝尝。真甜，甜到骨子里的那种感觉。我老婆很喜欢，我说我可能还是喜欢加州的葡萄酒，哈哈。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_augustine_mixer.jpg" alt="City Gate Spirits Mixer"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_augustine_port.jpeg" alt="Port Wine"></p><p>后来我们又聊了聊别的，诸如佛罗里达是度假的好地方，老俩年轻时的工作，对职业发展的期待，为何到佛罗里达退休，在美国各地的房产，家中油画的由来。。。</p><p>跟不同的人交流，听听不同的观点，这恰是我们长期待在湾区所需要的，而不是整天讨论公司勾心斗角、涨薪加班、倒卖房产、升职跳槽，生活本不该如此单调。</p><p>佛罗里达确实是个退休的好地方！</p><p><strong><em>更多完整版佛罗里达自驾游攻略，请参考 <a href="/2019/12/31/florida/">干货满满，环佛罗里达州深度自驾游攻略</a>。</em></strong></p>]]></content>
    
    <summary type="html">
    
      佛罗里达行程第八段攻略，我们来到了美国最古老的小镇，圣奥古斯丁 St Augustine，前来体会这百年历史遗留的人文气息。
    
    </summary>
    
    
      <category term="trip_2019_ye" scheme="http://zpjiang.me/tags/trip-2019-ye/"/>
    
  </entry>
  
  <entry>
    <title>iPhone Photo Orientation/Rotation in Browser</title>
    <link href="http://zpjiang.me/2019/12/28/iphone-image-rotation/"/>
    <id>http://zpjiang.me/2019/12/28/iphone-image-rotation/</id>
    <published>2019-12-28T20:10:40.000Z</published>
    <updated>2021-05-21T05:52:47.917Z</updated>
    
    <content type="html"><![CDATA[<p>I took the picture with iPhone 8+, when I posted it in my blog, it is rotated by 180 degree by default.</p><p>But if I view the post in Safari mobile, check the original picture in my phone or in Preview, or even open the image in a new Chrome tab, it looks perfectly normal, it just doesn’t work in a blog post in Chrome / Firefox / Safari (desktop).</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_dDbGjqB.png" alt="The side by side comparison of different image rotations." title="Side by Side Image Rotation Comparison"></p><span id="more"></span><h3 id="Root-Cause"><a href="#Root-Cause" class="headerlink" title="Root Cause"></a>Root Cause</h3><p>After some investigation, I found that it’s all because the information hidden in <a href="https://en.wikipedia.org/wiki/Exif">EXIF</a>. Let’s look at the EXIF data of the previous example, the Rotation field is actual noted as “rotated by 180 degree”, which means the photo itself is upside down.</p><p><img src="https://i.imgur.com/lXtlBC0.png" alt="An example of image EXIF data with orientation as 180 rotate." title="Image EXIF Example"></p><p>But why it looks normal in my phone or in Preview?</p><p>I <strong>guess</strong> it’s because the image viewer Preview supports EXIF, it respects EXIF information and shows images in a correct way (rotate them if needed). On the contrary, popular web browsers (e.g. Chrome, Firefox, Safari) don’t support this.</p><p>After some more googling, this issue has been discussed back in 2010, here’s the <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=56845">bug filed for Chromium</a>, there is also a plan to support EXIF rotation in <code>&lt;img&gt;</code> tag by adding a property <code>image-orientation</code>, unfortunately, it’s <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/image-orientation#Browser_compatibility">only supported in Firefox</a> at the moment.</p><h3 id="How-to-fix-this"><a href="#How-to-fix-this" class="headerlink" title="How to fix this?"></a>How to fix this?</h3><p>There’s not much I can do to add the support to Chromium, there must be a reason it takes so long to support EXIF. However, since I have the full control of the image, I can rotate the image beforehand according to its EXIF data, so I don’t need to rely on web browsers to correctly show them.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">filepath = <span class="string">&#x27;[FILE_PATH]&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># Read image and its EXIF data.</span></span><br><span class="line">    image = Image.<span class="built_in">open</span>(filepath)</span><br><span class="line">    <span class="keyword">for</span> orientation <span class="keyword">in</span> ExifTags.TAGS.keys():</span><br><span class="line">        <span class="keyword">if</span> ExifTags.TAGS[orientation] == <span class="string">&#x27;Orientation&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    exif = <span class="built_in">dict</span>(image._getexif().items())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Check if it needs to be rotated, and how.</span></span><br><span class="line">    need_rotate = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> exif[orientation] == <span class="number">3</span>:</span><br><span class="line">        image = image.rotate(<span class="number">180</span>, expand = <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">elif</span> exif[orientation] == <span class="number">6</span>:</span><br><span class="line">        image = image.rotate(<span class="number">270</span>, expand = <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">elif</span> exif[orientation] == <span class="number">8</span>:</span><br><span class="line">        image = image.rotate(<span class="number">90</span>, expand = <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        need_rotate = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> need_rotate:</span><br><span class="line">        image.save(filepath)</span><br><span class="line">    image.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> (AttributeError, KeyError, IndexError, IOError):</span><br><span class="line">    <span class="comment"># Handle the exceptions if needed.</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;failed to ...&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>This is only a sample Python script used as a POC (prove-of-concept), please clean it up if you want to use it in Production.</li><li>The script above will erase image EXIF data, so please use with caution, back up the image first if needed.</li><li>The meaning of orientation value is in this table:</li></ul><table><thead><tr><th style="text-align:center">EXIF Orientation Value</th><th>Row #0 is</th><th>Column #0 is</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>Top    Left</td><td>side</td></tr><tr><td style="text-align:center">2*</td><td>Top    Right</td><td>side</td></tr><tr><td style="text-align:center">3</td><td>Bottom    Right</td><td>side</td></tr><tr><td style="text-align:center">4*</td><td>Bottom    Left</td><td>side</td></tr><tr><td style="text-align:center">5*</td><td>Left side</td><td>Top</td></tr><tr><td style="text-align:center">6</td><td>Right side</td><td>Top</td></tr><tr><td style="text-align:center">7*</td><td>Right side</td><td>Bottom</td></tr><tr><td style="text-align:center">8</td><td>Left side</td><td>Bottom</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      A python script to fix iPhone photo rotation by applying EXIF data.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>佛罗里达长船礁美食 Dry Dock Waterfront Grill</title>
    <link href="http://zpjiang.me/2019/12/27/longboat/"/>
    <id>http://zpjiang.me/2019/12/27/longboat/</id>
    <published>2019-12-28T02:35:00.000Z</published>
    <updated>2021-05-21T05:52:47.917Z</updated>
    
    <content type="html"><![CDATA[<p>离开<a href="/2019/12/27/sanibel/">萨尼贝尔岛</a>，我们一路向北，今晚我们需要开到 Tampa，全程需要三个多小时，略微有点堵车。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_tampa.png" alt="Driving to Tampa from Sanibel"></p><p>正因如此，我们没能留在 Sanibel 看日落，不然会赶不上吃晚饭，好多餐厅九点多就打烊了。就在我们开出小岛没多久，发现身后已经红了半边天，我们找空气停下来随手拍了一张，只可惜手机拍不出那种蓬勃的气势。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_tampa_sunset.jpg" alt="Sunset in Tampa"></p><span id="more"></span><script>window.location = "https://blog.1pixel.cc/" + window.location.pathname;</script><h2 id="晚餐"><a href="#晚餐" class="headerlink" title="晚餐"></a>晚餐</h2><p>出了小岛，不一会儿就可以上 75 号高速，限速 70。之前查过佛罗里达高速限速，最高也就是这么多，不像犹他有些地方限速可以到 75。因为之前吃过两次超速罚单，这次来佛罗里达开车格外小心，纵使身后的车一辆辆超过去，我还是佛系地开着自动巡航，定速 74，超了 4mile 也不至于吃罚单吧，雷达测速不也得有个精度范围。</p><p>于是，我就成了整条高速上最佛系的 Mustang，甚至连 Prius 经过的时候都会踩足油门哄地一声过去，anyway。</p><p>差不多八点，我们这龟速目测9点是赶不到 Tampa 了，老婆在附近搜了搜，看到有家店不错，在海边，评分很高，价格还行，<a href="https://www.yelp.com/biz/dry-dock-waterfront-grill-longboat-key">Dry Dock Waterfront Grill</a>。</p><p>就在我们快要开到的时候，眼前突然从城市变成了一大片光秃秃的仓库，心头一紧，这导航应该没出错吧，我们打开 Yelp 反复确认了一边，确实是这里。停好车，黑灯瞎火的，走进了一看，原来是一间船舱，乍一看确实有些吓人。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_boats.jpg" alt="Boat storage"></p><p>就在犹豫要不要重新找家店的时候，我们打算碰碰运气，走到仓库那一头，我渐渐闻到了烤肉的味道，看来地方确实没错。再往里走几步路，一家藏在船舱后面的小酒馆就出现了。</p><p>进门，上二楼，才发现这里好多人，问了下等待时间，要等30到45分钟，不过 bar counter 是 first come first serve，只要有空位，坐过去也是可以点 dinner 的。我们运气比较好，稍微等了一会儿，就空出来两个座位。</p><p>开始点菜，满眼望去，全是海鲜，真是的每道菜都想点。为了能尽快吃上饭，我们来了份热汤 Crab &amp; Corn Chowder，主菜点了份 Lobster Rolls 和 Grouper Tacos。我们坐在吧台，看着 bartender 来来回回给人调酒，我们也要了份特色鸡尾酒，Shark Lady，和一扎当地产的 Draft Beer。</p><p>吧台前面的小黑板上，还写了每卖出一杯 Shark Lady，他们就会捐一块钱给当地保护海洋环境，👍</p><blockquote><p>Shark Lady<br>Don Q. Rum, Blue Curacao, Sour &amp; Pineapple<br>Gecko’s Hospitality Group makes a donation to Mote Marine Laboratory in support of Mote’s research toward the preservation of our coastal water. Named in Honor of the original Shark Lady Mote founder Dr. Eugenie Clark.</p></blockquote><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_shark_lady.jpg" alt="Shark Lady, the specialty cocktail in Dry Dock Waterfront Grill." title="Shark Lady"></p><p><strong><em>Crab &amp; Corn Chowder</em></strong> 🦀🌽🍲</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_crab_chowder.jpg" alt="Crab &amp; Corn Chowder in Dry Dock Waterfront Grill." title="Crab &amp; Corn Chowder"></p><p><strong><em>Lobster Rolls</em></strong> 🦞🍞🥬</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_grill_lobsterroll.jpg" alt="Lobster Roll in Dry Dock Waterfront Grill." title="Lobster Roll"></p><p>看这龙虾肉的份量，比那天在<a href="https://blog.1pixel.cc/2019/12/21/key-west-in-rain/#DJ%E2%80%99s-Clam-Shack">西礁岛 Key West 吃的 DJ’s Clam Shack</a> 实惠太多！</p><p><strong><em>Grouper Tacos</em></strong> 🐠🌮🍚🥬</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_grill_taco.jpg" alt="Lobster Roll &amp; Grouper Tacos in Dry Dock Waterfront Grill."></p><p>Grouper 中文翻译是石斑鱼，来自西班牙语的 garoupa，外表炸得酥脆，一口咬下去，肉质鲜嫩。服务员还很用心地把 lobster roll 和 taco 分在两个盘子上，这样我们每人都能尝到一些。</p><h2 id="聊天"><a href="#聊天" class="headerlink" title="聊天"></a>聊天</h2><p>坐在吧台吃饭，免不了会跟 bartender 闲聊两句。当我们正好提起这两天琢磨不透的天气，左边一位看上去五十多岁的大叔打趣说，这才是佛罗里达。也许是因为酒精的后劲，抑或是因为现场活泼的氛围，在场的每一个人都被这句逗乐了。</p><p>谁料，刚刚一直沉默不言的大叔，突然打开了话匣子，跟我们侃起了大山：他从上世纪 80 年代开始，每年必来佛罗里达度假。他家在纽约，小孩儿快上大学，他跟老婆孩子说需要一个 break，所以这次又一个人开车一路南下。说到这，就只见大叔眉飞色舞地描述开过来的一路，温度计一格一格往上跳，周围的景色也渐渐变得很不一样，想想纽约现在正大雪纷飞，佛罗里达的我们还是裤衩大T恤。</p><p>我们把盘中的食物一扫而光，就在慢慢喝酒的同时，我们聊天的话题也开始飘向全世界，诸如北加 Atherton 的豪宅是多么漂亮，南加洛杉矶的有钱人是多么浮夸，法国的葡萄酒是如何过誉，美国私立大学学费是多么高昂，佛罗里达西海岸的小镇是多么美丽宜人，他年轻的时候闯荡欧洲的经历是多么精彩丰富，巴拉巴拉。</p><p>当问到我们是学生还是已经工作了的时候，我们说都在 tech company 做 engineer，大叔一脸惊讶地看着我们，不知道是因为我们看上去年轻呢，还是因为大叔周围的 engineer 太少了。这让我们想起来，要是在码农满地都是的湾区，跟别人说自己也是搬砖的，对方多半会说，哦。</p><p>开心的时光总是飞逝而过，跟素不相识的陌生人聊天，听长辈们讲他们年轻的故事，这样放松惬意的氛围，不正是旅行的意义所在吗？</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_grill_bar.jpg" alt="Bar counter in Dry Dock Waterfront Grill."></p><p><strong><em>更多完整版佛罗里达自驾游攻略，请参考 <a href="/2019/12/31/florida/">干货满满，环佛罗里达州深度自驾游攻略</a>。</em></strong></p>]]></content>
    
    <summary type="html">
    
      佛罗里达行程第六段：离开美丽的佛罗里达萨尼贝尔岛，我们一路向北前往 Tampa，途经长船礁，有幸在 Dry Dock Waterfront Grill 享用了一顿丰盛的晚餐。
    
    </summary>
    
    
      <category term="trip_2019_ye" scheme="http://zpjiang.me/tags/trip-2019-ye/"/>
    
  </entry>
  
  <entry>
    <title>佛罗里达萨尼贝尔岛 Sanibel Island 沙滩捡贝壳</title>
    <link href="http://zpjiang.me/2019/12/27/sanibel/"/>
    <id>http://zpjiang.me/2019/12/27/sanibel/</id>
    <published>2019-12-27T20:30:00.000Z</published>
    <updated>2021-05-21T05:52:47.917Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.1pixel.cc/2019/12/26/naples/">前一晚</a>跟老奶奶唠嗑，听说她女儿特别喜欢去 Starbucks 吃早饭，小时候送她 Starbucks 的 gift card，她女儿特别开心。我们也顺路选了一家。一进门，我们就发现人是真的多，我们点餐后足足等了 20 分钟。之前看过 Netflix 的电影 <a href="https://www.imdb.com/title/tt4276820/">The Founder</a>，其中就有提到金拱门是如何成立的，以及如何通过改进人员分工和工具布局来提高生产效率，我们在 Starbucks 为此讨论的不可开交。</p><p>拿到早饭后，饥肠辘辘的我们很快就解决了一个 sausage muffin，一个 chocolate croissant，一大杯拿铁。老实说，确实比金拱门家的早饭好吃，价格差不多，咖啡更好喝是真的。</p><p>在有钱人这么多的小城市，人们美好的一天是从星巴克的早饭开始的。</p><p>今天的行程主要在萨尼贝尔岛，<a href="https://www.tripadvisor.com/Tourism-g34616-Sanibel_Island_Florida-Vacations.html">Sanibel Island</a>，想要进岛，必须经过 Sanibel Causeway，过路费 6 刀。我们看了看地图，决定沿着海边的 Estero Blvd 一路开过去，途中分别经过了 Big Hickory Island，Lovers Key State Park，Fort Myers Beach，因为时间仓促，这些景点我们就一带而过，其中 Fort Myers 沙滩停下看了一眼，白色细腻的沙滩，脚踩上去非常舒服，跟加州西海岸的沙滩很不一样，以后有机会再来玩吧。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_sanibel_map.png" alt="Driving to Sanibel Island from Naples"></p><span id="more"></span><script>window.location = "https://blog.1pixel.cc/" + window.location.pathname;</script><h2 id="Blind-Pass-Beach-amp-Turner-Beach"><a href="#Blind-Pass-Beach-amp-Turner-Beach" class="headerlink" title="Blind Pass Beach &amp; Turner Beach"></a>Blind Pass Beach &amp; Turner Beach</h2><p>之所以行程如此匆忙，就是因为我们要来这两个地方，捡贝壳！<a href="https://cn.tripadvisor.com/Attraction_Review-g28930-d210229-Reviews-Turner_Beach-Florida.html">Tripadvisor</a> 上很多人评论，这两个沙滩非常适合捡海螺，<a href="https://sanibel-captiva.org/sanibel-island-shelling/">官方网站</a>还给出了具体捡贝壳的最佳时间和贝壳种类。</p><p>需要提醒的是，Sanibel Island 上停车位非常少，捡贝壳的这两个沙滩靠很近，各自有一个小停车场，5刀/小时。我们比较幸运，在 Turner Beach 正好找到一个车位。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_blindpass.jpg" alt="Blind Pass Beach" title="Blind Pass Beach"></p><p>如果从 Google Map 看，可以发现这附近的海水都特别的浅，具体有多浅呢，如下图，基本二三十米之外，人站在水里也就差不多到膝盖左右。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_blindpass_map.png" alt="Blind Pass Earth View"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_blindpass3.jpg" alt="Stand in the sea water around Blind Pass Beach" title="Blind Pass Beach"></p><p>水有多么清澈呢，看视频</p><iframe width="560" height="315" src="https://www.youtube.com/embed/gdIg0qRM3Ic" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>岸边的贝壳</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_blindpass_shell.jpg" alt="Blind Pass Beach Shells"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_blindpass_shell2.jpg" alt="Blind Pass Beach Shells"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_blindpass_shell3.jpg" alt="Blind Pass Beach Shells"></p><p>之前信心满满，说要捡很多，然而现实总是很残酷，别说捡那些好看的，就连半个巴掌大的海螺都看不见。当然了，如果你有足够的耐心和时间，那就另当别论。不少游客就趴在岸边掏（名副其实的“海淘“），指不定地下还埋有不少好宝贝。</p><p>另外，我们之前准备工作没做好，下次捡贝壳最好带一个塑料袋，我们这次拿了个纸袋子，湿掉后又漏了很多，发现的时候已经没剩几个了，😭</p><p>Anyways，我们光顾着捡贝壳，没能好好享受下沙滩。有人带着皮划艇和 paddle board 来玩，水面浪不大，正合适。除此之外，岸边和桥上站着不少人在钓鱼，我暂时还没能理解这项活动的乐趣所在，再过几年吧。</p><h2 id="Alison-Hagerup-Beach"><a href="#Alison-Hagerup-Beach" class="headerlink" title="Alison Hagerup Beach"></a>Alison Hagerup Beach</h2><p>过了中午，我们没有在捡贝壳的地方过多停留，赶紧上岸开车去下一个点 Alison Hagerup Beach。这个沙滩坐落在小岛的尽头，从 Blind Pass Beach 出来后一路往北开到底。之前在公司，几位同事不约而同地推荐，一定要去这个地方，这让我们对此充满了期待。果不其然，在快要到目的地时，车已经排起了长队，估计是里面的停车场太小，只能一辆出一辆进了。</p><p>这个时候，我们犯了一个错误，误以为还可以从别的地方找到停车位，于是掉头往回走，结果一个 public parking 都没找到，一眼望去能停车的地方，基本都写了 no beach parking。其中，我们看到一处酒店 <a href="https://www.southseas.com/">South Seas Island Resort</a>，里面看上去真不错，棕榈树，干净的小路，一栋栋的别墅，基本把小岛的北面部分全包了，我拿出手机查了下价格，旅游旺季都是 800+，以后年纪大了再考虑吧。</p><p>重新回到排队的地方，情况看来并没有那么糟糕，因为时不时就有排在我们前面的车，怀着跟我们之前一样的侥幸心理，想出去找位子，结果反倒让我们前进了不少。</p><p>在车上等了一会儿，我们决定让老婆先去沙滩上探探风，如果还可以她就先玩半个小时，如果车还没排进去，就回来换我进去，😂</p><p>差不多等了有三四十分钟，我们总算进了停车场，停车费也是 5刀/小时，day pass 是 20刀。付钱，换衣服，擦防晒霜，拿毛巾，带上浮潜工具，总算可以见到心心念的沙滩。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_alison.jpg" alt="Alison Hagerup Beach" title="Alison Hagerup Beach"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_alison3.jpg" alt="Jenny in Alison Hagerup Beach"></p><p>看着这么清澈的海水，真想下去游个痛快，但由于我从来没有独自下海游过，不知道会不会出现奇怪的东西（其实这么浅的海滩，不会有鲨鱼），再加上这海水确实有点冷，比 Biscayne 浮潜那次温度还要低，徘徊犹豫中。。。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_alison4.jpg" alt="Alison Hagerup Beach" title="Alison Hagerup Beach"></p><p>在水上逗留了一会儿，最后心一横，来都来了，不逼自己一下都对不起今天在外面等的时间。于是，扑通一声，我就下去了。</p><p>之前在水上，耳边是周围游客的嬉笑，是海鸟捕鱼的长鸣，是海风吹过棕榈树的沙沙作响，然而到了水下，这一切都像被过滤掉了，能听到的，只有海浪一次又一次扑向岸边的拍打，这是一种别样的安静，心中之前的恐惧都烟消云散，海底就在眼前，我真正体会到什么是清澈见底。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_alison_me2.jpg" alt="Me in sea water."></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_alison_me3.jpg" alt="Me in sea water."></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_alison_me5.jpg" alt="Me in sea water."></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_alison_me6.jpg" alt="Me in sea water."></p><p>不一会，当我再次钻出水面，看我找到了什么，是海螺！</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_alison_shell.jpg" alt="Me in sea water."></p><p>除了浮潜，另外比较有趣的是，在离岸不远处，不少水鸟漂在海面上，它们可不只是在享受着沙滩阳光，而且还时刻瞄着海里的鱼，一旦它们发现目标，便会飞起来，在合适的时机，cua 一下扎进水里，不一会儿就能看到它们高高仰起脖子，囫囵吞枣一般把海鱼咽下。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/fLeypolA0MI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>这个时候呢，我老婆因为不想下水，我们就一起在岸边挖了个坑，垫上雨衣和毛巾，让她把脚埋在温热的沙子里，舒舒服服躺在里面晒太阳。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_alison_jenny.jpg" alt="Jenny on the beach."></p><p>不记得过了多久，我发现海浪变得越来越大，一抬头，才发现太阳已经开始西下。我们看了看停车时间，差不多两个小时，收拾收拾家什，带着一堆海螺贝壳满载而归。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_alison_sunset.jpg" alt="Sunset on the beach."></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_alison_sunset2.jpg" alt="Sunset on the beach."></p><p><strong><em>Tips</em></strong></p><p>Alison Hagerup Beach 并没有淡水冲洗的地方，所以沾满泥沙的脚只能用手抹一抹，另外洗手间也是那种 mobile toillet，旱厕。</p><p>不过没关系，往回开的路上，会再次经过 Turner Beach，那边可以冲全身和冲脚，厕所也更加干净，也可以洗手，就在停车场里。我们回去经过的时候没有停车位，就打着双闪在停车场空地上临时停了一会儿，我跟我老婆轮流去冲了脚。<strong>不要擅自停在路边，路很窄，堵着别人就不地道了。</strong></p><p><strong><em>更多完整版佛罗里达自驾游攻略，请参考 <a href="/2019/12/31/florida/">干货满满，环佛罗里达州深度自驾游攻略</a>。</em></strong></p>]]></content>
    
    <summary type="html">
    
      佛罗里达行程第五段：佛罗里达的西海岸的萨尼贝尔岛攻略，在细腻的白色沙滩上捡贝壳，在清澈见底的海边浮潜，在海边看夕阳西下落日余晖。
    
    </summary>
    
    
      <category term="trip_2019_ye" scheme="http://zpjiang.me/tags/trip-2019-ye/"/>
    
  </entry>
  
  <entry>
    <title>佛罗里达那不勒斯 Naples 住宿 &amp; 美食</title>
    <link href="http://zpjiang.me/2019/12/26/naples/"/>
    <id>http://zpjiang.me/2019/12/26/naples/</id>
    <published>2019-12-27T07:00:00.000Z</published>
    <updated>2021-05-21T05:52:47.917Z</updated>
    
    <content type="html"><![CDATA[<p>结束<a href="https://blog.1pixel.cc/2019/12/26/everglades-2/">大沼泽地国家公园的看动物之旅</a>，我们驱车一路向北，来到佛罗里达的西海岸的一座小城市 Naples。自打过了圣诞节，路上的游客明显变多了起来，酒店的价格自然也较节前高出不少，这之后的行程，有几天是我们是住在 Airbnb，今晚，我们是住在一位老奶奶家。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_naples_airbnb.jpg" alt="Airbnb in naples"></p><span id="more"></span><script>window.location = "https://blog.1pixel.cc/" + window.location.pathname;</script><h3 id="Airbnb-in-Naples"><a href="#Airbnb-in-Naples" class="headerlink" title="Airbnb in Naples"></a>Airbnb in Naples</h3><p>在这之前，我们在 Airbnb 住宿的体验可谓好坏一半一半，主要担心在于，便利性、隐私性和干净程度还是比不上酒店。</p><p>这次的 Airbnb host 是一位老奶奶 Denise，英国人，我说话发音不准还被嘲笑了一番。刚到 Denise 家时，因为 Google Map 定位不准，我们走错了单元，之前 Denise 给我们发了一大段关于怎么找路的短信，作为 Google 的 engineer，我还是对自家产品太过自信，loll。老奶奶那天身体不是很舒服，但听说我们找不到地方，就焦急地出门来找我们，虽然外面还飘着小雨，所幸我们就在不远处，当晚车也很少，我们一眼就看到了她。</p><p>老奶奶家是 townhouse，刚进门，就发现布局还是很不错的，我们住其中一间客房，有 walk in shower，房间布置非常精致，墙上挂的壁画、衣柜、台灯、床架，无一不能体会老奶奶的审美和用心。</p><p>老奶奶开玩笑地说，所有住过她家的 guest 都说她家的床是最舒服的，没有之一，it turns out to be true。</p><p>后来跟老奶奶闲聊，了解到她的孩子们也都跟我们差不多的年纪，在世界各地都成家立业了。老奶奶做 Airbnb host 已经五六年，这几天身体不舒服，她女儿劝她不要继续弄这些，可是老奶奶说，人家（我们）行程都已经订好了，临时取消人家住哪儿，感动。</p><h3 id="Dinner-in-Naples"><a href="#Dinner-in-Naples" class="headerlink" title="Dinner in Naples"></a>Dinner in Naples</h3><p>打开 Yelp，26号晚上8点还开着店不多，我们预订了一家评分还不错的秘鲁菜 <a href="https://www.yelp.com/biz/la-cuisine-peruvian-roots-naples">La Cuisine Peruvian Restaurant</a>，这一路吃过来，像发现了新大陆一样，觉得秘鲁菜的 Ceviche 尤其好吃。</p><p>到了店里，一位顾客也没有，看看厨房小哥们，好像都等着我们过去吃完他们可以早点收拾回家。</p><p>一位看上去像大厨模样的大叔走过来，我们问当天有没有 anything special，我们就想吃海鲜。大厨合上 menu，跟我们说了一大通，英语混着西班牙语，我差不多也就听懂了一些 sushi、scallop 还有些鱼的名字。我们看菜单上经常出现一个词 Corvina，这种鱼在南美附近吃的人很多，我们吃的 Ceviche 里面也有这种鱼。翻了翻 Yelp，大厨说，他们现在都用 Instagram po图，还让我们 follow 他们的 hashtag，真是赶时髦！Anyway，我们点了三道前菜，一份 entree，还有一杯饮料，据大厨说，主要成分是拿菠萝和其他的水果煮出来的，甜度恰到好处，暂时没找到照片和名字。</p><p><strong><em>Ceviche de Corvina / Mixto</em></strong> 🐠🦐🦑🌽🍋🧅</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_ceviche.jpg" alt="Ceviche de Corvina in La Cuisine Peruvian Restaurant" title="Ceviche de Corvina"></p><p>Ceviche 不解释，好吃，推荐！这次吃的里面还多了两只煮熟的生蚝，沾着 Ceviche 的酱很好吃。</p><p><strong><em>Conchas a la Parmesana (Scallop)</em></strong> 🐠🧀</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_scallop.jpg" alt="Conchas a la Parmesana (Scallop) in La Cuisine Peruvian Restaurant" title="Conchas a la Parmesana"></p><p>这道菜做法看上去并不是很难，scallop 放在 clam shell 上，铺上一层 Parmesana cheese（也就是 Parmesan），放烤箱烤熟出炉，最后出炉时地下铺上一层厚厚的海盐，做装饰，看着有点浪费。</p><p>我老婆很喜欢吃 Scallop。</p><p><strong><em>Tiradito de Corvina</em></strong> 🐠🍣🧀🌶️</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_tiradito.jpg" alt="Tiradito de Corvina in La Cuisine Peruvian Restaurant" title="Tiradito de Corvina"></p><p>这道菜比较特殊，鱼是生的，还是 Corvina，摆在调好的酱汁中，上面撒上了一些坚果，周围一圈红色的是小辣椒，不是小番茄，吃起来酸酸甜甜，微微有些辣。吃的时候，拿着鱼片沾满酱，裹着一些坚果、小辣椒，卷好放入口中，味道很有层次感，酸辣清甜的口感带着一丝惊喜，好吃！</p><p>跟大厨闲聊，他提到现在秘鲁菜越来越流行，尤其是佛罗里达地区。秘鲁菜吸收了南美菜系的传统，引入了欧式西餐、日餐和中餐的精髓，融会贯通，就在他们餐厅，他能365天，天天不重样地做一道菜。这道鱼生，恰是融合了西餐 creme 浓郁的汤底和日餐 sashimi 的鲜美，不得不说真的很用心！</p><p><strong><em>La Cuisine Special</em></strong> 🐠🦐🦑🐚🍋</p><p>这顿饭，我们吃 Corvina 停不下来，Tilapia 换成了 Corvina，加两三刀。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_cod.jpg" alt="La Cuisine Special in La Cuisine Peruvian Restaurant" title="La Cuisine Special"></p><p>最后上的这道菜，真是神来之笔，鲜出天际。底汤是由 clam、calamari 加上 cheese 熬制，上面是一块外酥里嫩的 Corvina 鱼排，就是看上去这么简单的一道菜，好吃到哭。这道菜会附带一份米饭，我们用这酱汁拌着吃，鲜美！推荐！一定要点！</p><p><strong><em>Crema Volteada (Peruvian Flan)</em></strong> 🍰🕯️</p><p>酒足饭饱，看我们把盘子刷的干干净净，大厨端着一盘甜点走到我们身边，点上蜡烛，说祝福我们纪念日快乐，这时才想起来，预定的时候老婆写了 to celebrate our anniversary，难得店家这么用心！</p><p>从15年圣诞节领证，到现在都已经四年了，这期间我们经历了很多，每一年都过得很精彩，感谢老婆这些年的长情相伴！</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_flan.jpg" alt="Crema Volteada in La Cuisine Peruvian Restaurant" title="Crema Volteada"></p><p>Btw，吃完后我们看到账单，四道海鲜加饮料，总共才70多一些，价格真是良心到家，想想湾区上天的物价，不禁感慨，佛罗里达真是退休的好地方。</p><h3 id="Naples-Downtown"><a href="#Naples-Downtown" class="headerlink" title="Naples Downtown"></a>Naples Downtown</h3><p>吃了那么多，离开餐厅的时候已经9点多，我们开车绕到 downtown 打算散散步。Naples 建城于1880年代后期，因周边景色类似于意大利那不勒斯而得名。别小看这个地方，这里可是全美最富有的地方之一，人均收入全美第六高，per capita 的百万富翁数全美第二【<a href="https://en.wikipedia.org/wiki/Naples,_Florida">ref</a>】！</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_naples_downtown.jpg" alt="Naples City Dock" title="Naples City Dock"></p><p>我们在空无一人的 downtown 随便走了走，看着街边各种卖油画的小店，隐隐约约能够感受到小城市安闲舒适的生活氛围，偶然经过一些小酒吧，片刻的喧嚣更加映衬出这夜晚的宁静，耳边留有的，是远处阵阵海浪拍打上岸的声音。</p><p><strong><em>更多完整版佛罗里达自驾游攻略，请参考 <a href="/2019/12/31/florida/">干货满满，环佛罗里达州深度自驾游攻略</a>。</em></strong></p>]]></content>
    
    <summary type="html">
    
      佛罗里达行程第四段：佛罗里达西海岸的那不勒斯攻略，住在干净舒适的Airbnb，吃在惊喜不断的 La Cuisine Peruvian Restaurant。
    
    </summary>
    
    
      <category term="trip_2019_ye" scheme="http://zpjiang.me/tags/trip-2019-ye/"/>
    
  </entry>
  
  <entry>
    <title>大沼泽地国家公园 Everglades NP - 鳄鱼 &amp; 海豚</title>
    <link href="http://zpjiang.me/2019/12/26/everglades-2/"/>
    <id>http://zpjiang.me/2019/12/26/everglades-2/</id>
    <published>2019-12-26T20:10:40.000Z</published>
    <updated>2021-05-21T05:52:47.917Z</updated>
    
    <content type="html"><![CDATA[<p>接上篇<a href="/2019/12/24/everglades/">大沼泽地国家公园 Everglades National Park - 上篇</a>，因为天气原因，许多行程被打乱，24号下午和25号被安排了其它的 Tour，所以只能26号回来接着玩大沼泽地国家公园。另外，从地图上看，Everglades 公园有两条分支，完全没有重合的部分，分两次玩更合理一些。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_1yrxiZL.png" alt="The two entrances to Everglades National Park." title="Two Entrances to Everglades National Park"></p><p>之前查了不少攻略，很多中文的邮寄推荐坐空气船和看鳄鱼，我们看了很多油管视频，觉得空气船噱头大于其真实体验，再加上约了出海看海豚的 tour，所以这一天的行程安排如下：</p><ul><li>去 Shark Valley Visitor Center 看鳄鱼</li><li>去 Gulf Coast Visitor Center 坐船出海看海豚</li></ul><p>嗯，这是专门看动物的一天。</p><span id="more"></span><script>window.location = "https://blog.1pixel.cc/" + window.location.pathname;</script><h3 id="Shark-Valley-Visitor-Center-看鳄鱼和林鹳"><a href="#Shark-Valley-Visitor-Center-看鳄鱼和林鹳" class="headerlink" title="Shark Valley Visitor Center 看鳄鱼和林鹳"></a>Shark Valley Visitor Center 看鳄鱼和林鹳</h3><p>我们住在迈阿密附近的 Four Points by Sheraton ，开车去 Shark Valley Visitor Center 差不多四五十分钟。就在车快到开到时，我们已经能看到路边停了不少车，心想不会是公园里停满了吧。果不其然，刚刚拐近公园的小路，就看到一溜车排着长队等着进去。因为下午时间紧张，我们果断掉头回高速，跟别人一样停在路边，然后走进公园。车刚停稳，不知哪里飘来的一大坨乌云，外面开始刮起了风下起了雨，我心中一边默念MMP，一边披了件雨衣下车了。</p><p>大概走了一刻钟，裤子都被淋湿了，雨停了。就在快要进园的路边，看见黑乎乎一团，走近一看，原来是一只鳄鱼！好家伙，雨刚停就出来晒太阳了（其实没有太阳），一副懒洋洋的样子，对路人不理不睬，偶尔抬个头看路人一眼，又若无其事的埋头闭眼继续休息。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_0038.jpg" alt="Alligator come out after rain."></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_0039.jpg" alt="Alligator come out after rain."></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_0040.jpg" alt="Alligator come out after rain."></p><p>进园的地方，我们远远就看见一群人在排队。因为我们有 NP Annual Pass，给工作人员看了一眼就直接进去了，这 80 刀花的真值。</p><p>我们去 Visitor Center 问了问今天的天气和推荐路线，正如网上很多攻略所说，可以骑自行车绕一个 Loop trail，大概10 miles 的路程，paved road。可惜我们没那么多时间，就折中找了个小 loop。走了没两步，又看到几条鳄鱼。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_0041.jpg" alt="Alligator come out after rain, resting along the river side."></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_0042.jpg" alt="Alligator come out after rain, resting along the river side."></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_0049.jpg" alt="Alligator come out after rain, resting along the river side."></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_0071.jpg" alt="Alligator come out after rain, resting along the river side."></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_0073.jpg" alt="Alligator come out after rain, resting along the river side."></p><p><strong>这里啰嗦一句，尽管鳄鱼们看上懒懒散散，每天被这么多游客参观，但是别靠太近，当它们感觉到危险，也是会攻击游客的，所以千万得小心。</strong></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_everglades_bird.jpg" alt="Wood stork"></p><h3 id="Gulf-Coast-Visitor-Center-出海看海豚"><a href="#Gulf-Coast-Visitor-Center-出海看海豚" class="headerlink" title="Gulf Coast Visitor Center 出海看海豚"></a>Gulf Coast Visitor Center 出海看海豚</h3><p>离开 Shark Valley 的时候又下起了雨，我们一路小跑回车上，往 Gulf Coast Visitor Center 进发，幸好一路通畅，我们赶在开船前抵达。</p><p>天气不是很好，但也没有下雨的意思。我们坐在穿上，遇到一家子法国人，他们似乎不太听得懂英语，有一位负责帮他们翻译。Ranger 跟他们说开船后不能站在椅子上，说了好几遍，这些法国人听的一愣一愣的，不知道听懂多少，lol。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_0090.png" alt="The location of the dolphine view tour in Gulf Coast Visitor Center."></p><p>行船的路线差不多就是沿着海岸的这些珊瑚岛转转，这里小岛很多，所以不少人戏谑地称这里叫千岛湖，拍几张照留念。</p><p>不远处的瓢泼大雨。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_0091.jpg" alt="Rain"></p><p>被海鸟霸占了一座浅滩。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_0099.jpg" alt="Island full of birds" title="Island Full of Birds"></p><p>海豚！</p><iframe width="560" height="315" src="https://www.youtube.com/embed/fMrTA6L1y1c" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><iframe width="560" height="315" src="https://www.youtube.com/embed/B008gQyTM6E" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><iframe width="560" height="315" src="https://www.youtube.com/embed/AAX4xtykDKQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><iframe width="560" height="315" src="https://www.youtube.com/embed/uTqE3Ku9gYc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p><strong><em>更多完整版佛罗里达自驾游攻略，请参考 <a href="/2019/12/31/florida/">干货满满，环佛罗里达州深度自驾游攻略</a>。</em></strong></p>]]></content>
    
    <summary type="html">
    
      佛罗里达行程第三段下篇：大沼泽地国家公园攻略，去 Shark Valley 看鳄鱼，去 Gulf Coast 看海豚。
    
    </summary>
    
    
      <category term="trip_2019_ye" scheme="http://zpjiang.me/tags/trip-2019-ye/"/>
    
  </entry>
  
  <entry>
    <title>佛罗里达比斯坎国家公园 Biscayne NP 划直立板 &amp; 浮潜</title>
    <link href="http://zpjiang.me/2019/12/25/biscayne/"/>
    <id>http://zpjiang.me/2019/12/25/biscayne/</id>
    <published>2019-12-25T08:10:40.000Z</published>
    <updated>2021-05-21T05:52:47.916Z</updated>
    
    <content type="html"><![CDATA[<p>圣诞这一天，我们来到了佛罗里达比斯坎国家公园 Biscayne National Park，早上从酒店出发时还是阴云密布，开到公园时已是一片蓝天，前后 10 miles 的车程，迈阿密的天气真是让人琢磨不透。</p><p>比斯坎国家公园跟其它的国家公园很不一样，区别在于，要去景点，都得先出海！公园的具体介绍可以参考 <a href="https://en.wikipedia.org/wiki/Biscayne_National_Park">Wiki - Biscayne National Park</a> 和 <a href="https://www.nps.gov/bisc/index.htm">Biscayne: A Watery Wonderland</a>。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9995.jpg" alt="Peace water in Biscayne National Park." title="Peace water in Biscayne National Park"></p><span id="more"></span><script>window.location = "https://blog.1pixel.cc/" + window.location.pathname;</script><h3 id="装备"><a href="#装备" class="headerlink" title="装备"></a>装备</h3><p>我们从网上预订了6小时的 paddleboarding + snorkeling 的 tour，上午十点开始，因为之前没有玩过 paddle board，很多东西都是到了公园内才买的，下次玩就可以提前准备起来。</p><ul><li>太阳眼镜。只要天气不太差，这个总是需要的</li><li>防晒霜。同上，需要注意的是要买对珊瑚礁安全的，Coral Safe</li><li>干粮。整个行程包括中午吃饭，paddling 和 snorkeling 都需要一定的体力</li><li>干净衣服。玩结束后一身海水，公园有淡水冲淋，结束后回到车上换一身干净衣服会舒服很多</li><li>拍照设备！GoPro，手机，只要能防水，或者带一个ZipLog，有地方放</li><li>Snorkel 面罩和脚蹼，自备或者到现场租，6刀一个，optional</li><li>Wetsuit，自备或现场租，6刀一个，强烈推荐，保暖，自带一点浮力，还有一定的防晒效果</li></ul><h3 id="出发"><a href="#出发" class="headerlink" title="出发"></a>出发</h3><p>10点30，我们从公园出发，今天出海的一共五个人，还有一户美国三口之家，tour guide 给我们讲了讲船上的注意事项，以及一些救生 tips，比如船发动机着火该怎么办，遇到危险了应该如何呼救。讲差不多，船也慢悠悠地驶出码头。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9958.jpg" alt="The tour guide in Biscayne National Park"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9965.jpg" alt="Birds"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9970.jpg" alt="Birds"></p><p>等到船出了慢速区，tour guide 让大家抓好船边的扶手，开始加速驶向海湾，差不多开了二十分钟抵达了 mangrove 密布的小岛附近。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9974.png" alt="The position of paddleboarding in Biscayne National Park"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9976.jpg" alt="Peace water in Biscayne National Park"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9980.jpg" alt="Peace water in Biscayne National Park"></p><h3 id="Paddle-Boarding"><a href="#Paddle-Boarding" class="headerlink" title="Paddle Boarding"></a>Paddle Boarding</h3><p>准备下水了，tour guide 给我们提供了两种划桨，一种两头都能划水，一种只有一头可以用。区别在于，第一种划水更轻松，人可以坐在 paddle board 上，类似皮划艇那样左右交叉划水。第二种更适合想站在 paddle board 上的人，一头划水，一头可以伸缩调节长度，坐着、跪着、站着都行，缺点是累一些。我估摸着自己体力应该不是问题，要了第二种。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_GOPR0734.jpg" alt="Jump on the paddle board"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_GOPR0739.jpg" alt="Jump on the paddle board"></p><p>Paddling 的地方水很浅，5 feet，差不多到胸和脖子附近。海水很清澈，水下的海藻看得一清二楚。可惜，由于天气不太给力，加上GoPro镜头有些糊，拍出来的海水和天空没那么蓝。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_GOPR0741.jpg" alt="Clear water in Biscayne National Park"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_GOPR0757.jpg" alt="Clear water in Biscayne National Park"></p><p>到了开阔的空地，我想尝试站起来，跪太久双腿有些麻。我调整自己的位置，差不多站在 board 中间稍稍偏后，先用两手撑在前面，双脚蹬板，把膝盖提起来，重心慢慢往后移，直至双手离开 board，像深蹲那样蹲着，最后直起身慢慢地站起来。（后来我又看了不少油管视频，大家似乎都是撑着的时候一只脚先挪到前面，然后再站起来，我下次试试，附一篇详细介绍）。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/9_7IdfrmbC8?start=170" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>我刚开始站起来的时候，双腿抖得特别厉害，后来反思原因主要有两个：</p><ul><li>心里太慌，怕掉水里，加上海面有一点点波浪，左右晃动难以控制</li><li>重心太高，腿部不够放松，尤其划一下水，重心左右抖得很厉害</li></ul><p>站了没多久，比跪着还累，每划一次水都要努力控制身体平衡。为了不掉队太多，我又乖乖蹲下去了，方法就是照着之前的动作，逆着做一遍。</p><p>Tour guide 带着我们到了一群 mangrove 中间，让我们从树丛中穿过去，看上去感觉很有意思！从下面的视频可以看出，mangrove 并不高，要想穿过去，人得弯着腰，因为空间太小不太好划水，tour guide 跟我说可以直接拽着树枝穿过去，亲测好用。只是，不要用力过猛，水上滑行没有刹车，一不小心就会撞到 mangrove 丛中，手臂或者腿很容易被树枝刮到。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/8EGJWaM7dg0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>出了 mangrove 丛，第二次尝试站起来，明显感觉比第一次轻松很多，应该是因为对水的惯性更熟悉，心里也没那么慌了。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_GOPR0753.jpg" alt="Stand on paddle board"></p><p><strong>徒手活抓水母 Jellyfish</strong></p><p>我们的 tour guide 简直太酷了，他带着我们 paddle 到一个地方，指着水里说那里有很多水母，因为颜色跟海藻很接近，大家很难看清楚。一直以来，我都以为水母是下面这样的，直到亲眼见到才发现很不一样。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/6/68/Seanettle_Swarm_%2818583111206%29.jpg" alt="img"></p><p>Tour guide 用自己的桨，斜着插到海底，然后用手活捉一只。他问大家谁敢去握住水母，好多人都不敢，被水母咬一下可是很疼的。我按耐不住心痒痒，上去试了一把，那感觉实在太奇妙了，感觉像握着一个滑溜溜的水袋！</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_GOPR0770.jpg" alt="Hold a jellyfish in Biscayne National Park"></p><p>除了抓水母，paddle 的时候我们还看到了小海龟，气定神闲地从我们身边游过。还有一些长得像泥鳅一样的海鱼，可惜没拍上照片，名字也没听清楚。</p><h3 id="中午休息-Elliott-Key-Island"><a href="#中午休息-Elliott-Key-Island" class="headerlink" title="中午休息 Elliott Key Island"></a>中午休息 Elliott Key Island</h3><p>Paddle 了一大圈，我们回到船上，不知不觉已经是下午一点多，我们的船开到了附近一座小岛 <a href="https://www.nps.gov/bisc/planyourvisit/elliottkey.htm">Elliott Key</a>，这是比斯坎公园最大的岛，曾经 Visitor Center 就坐落在这里，后来由于 hurricane 才挪走。我们在泊船的附近转了转，发现岛上的基础设施还是很完善的，厕所很干净，有淡水供应，有可以淋浴的地方，但是<strong>没有垃圾桶</strong>，所以岛上有标示，请把所有垃圾一并带走。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_0001.jpg" alt="Elliott Key Island in Biscayne National Park"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_elliott_key.jpg" alt="Elliott Key Island in Biscayne National Park, with boats docked in the bay."></p><p>我们找了个阴凉的地方坐下，吃了几根 energy bar 补充体力。没坐多久，时不时地总能感觉小腿和手臂奇痒，像是被蚊子咬过。仔细一看，果然是蚊子，体积非常小，被拍死后就能看到被吸出来的血。Tips，吃完尽量不要在草地上溜达，太阳下好很多，就是有些晒，或者像 tour guide 说的，可以坐在岸边把腿泡在海水里。</p><h3 id="浮潜-Snorkeling"><a href="#浮潜-Snorkeling" class="headerlink" title="浮潜 Snorkeling"></a>浮潜 Snorkeling</h3><p>中午休息，差不多两点左右我们出发去浮潜。略有遗憾的是天气不是很给力，到浮潜的地方时又不知从什么地方飘来的乌云。我们穿好脚蹼，因为穿了 websuit，并不需要救生衣。我第一个下水，虽然做好心理准备，但还是因为这凉凉的海水打了个冷颤。船上其他几位下水试了试，觉得水太冷，游了一圈就上船了。我心想，来都来了，就豁出去吧。</p><p>这里有两份小建议：</p><ul><li>因为浮潜的地方很浅，脚上穿着脚蹼，人游泳面朝下，想要站起来有点难。比较好的方法是稍微侧个身，或者换成仰泳，这样站起来更容易。</li><li>浮潜的地方靠近 mangrove，tour guide 说靠近 mangrove 能看见更多东西。然而，实际情况是，离 mangrove 越远，我越是看到了更多的珊瑚和鱼，而且海水相对更暖和一点。</li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/9B71Oh8JLRI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_GOPR0783.jpg" alt="Coral in Biscayne National Park" title="Coral in Biscayne National Park"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_GOPR0780-1.jpg" alt="Coral in Biscayne National Park" title="Coral in Biscayne National Park"></p><p>就这么在海面上漂了一小时，三点半左右我们回到船上，准备返航！</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>真是相当丰富充实的一天，paddleboarding 第一次站起来，技能 get，看到不少海底小动物和珊瑚，记得下次拍 GoPro 前先把镜头擦一擦，防晒霜很重要，wetsuit 可以考虑自己买一套。</p><p><strong><em>更多完整版佛罗里达自驾游攻略，请参考 <a href="/2019/12/31/florida/">干货满满，环佛罗里达州深度自驾游攻略</a>。</em></strong></p>]]></content>
    
    <summary type="html">
    
      比斯坎国家公园攻略，玩水上运动的一天，划直立桨板 paddleboarding 和浮潜，看海底动物 jellyfish 和珊瑚。
    
    </summary>
    
    
      <category term="trip_2019_ye" scheme="http://zpjiang.me/tags/trip-2019-ye/"/>
    
  </entry>
  
  <entry>
    <title>大沼泽地国家公园 Everglades NP - 深入沼泽地骑行</title>
    <link href="http://zpjiang.me/2019/12/24/everglades/"/>
    <id>http://zpjiang.me/2019/12/24/everglades/</id>
    <published>2019-12-24T20:10:40.000Z</published>
    <updated>2021-05-21T05:52:47.916Z</updated>
    
    <content type="html"><![CDATA[<p>大沼泽地国家公园 Everglades National Park 坐落在西礁岛和迈阿密之间，具体介绍请参考<a href="https://en.wikipedia.org/wiki/Everglades">维基百科 - Everglades</a> 及其官网 <a href="https://www.nps.gov/ever/index.htm">Everglades</a>。</p><p>我们第一天下午四点左右赶到 Visitor Center，问了问最近的天气状况，热门景点，Tours以及最近经常出没的动物。经过一番讨论，我们的行程如下：</p><ul><li>第一天傍晚，沿着 Anhinga Trail 观看大沼泽地和鳄鱼，水鸟</li><li>第二天早上，参加免费的野外骑行 Tour，结束后去走几个 hiking trail 拍拍照</li></ul><p><img src="https://raw.githubusercontent.com/0x333333/hexo_img/master/IMG_9877.jpg" alt="Bike in Everglades National Park" title="Everglades National Park"></p><span id="more"></span><script>window.location = "https://blog.1pixel.cc/" + window.location.pathname;</script><h3 id="Anhinga-Trail"><a href="#Anhinga-Trail" class="headerlink" title="Anhinga Trail"></a>Anhinga Trail</h3><p>在 Ernest F. Coe Visitor Center 询问了 ranger 最近的天气、注意事项等，我们打算赶在天黑前走一个短的 trail，正好 Anhinga Trail 就在附近，从 Visitor Center 开进去，路过售票处，差不多再开十分钟就到了。</p><p>途中，看前后没车，我偷偷试了把 Mustang Sports+ 和 Drag Strip 两种模式的加速，油门灵敏度还是有很大差距的，尤其是 Drag Strip 模式，Traction Control 会自动关闭，方向盘稍有不稳，车身就会产生晃动，后驱车的通病。（扯远了）</p><p>在 trail 开始的地方，我们看到一群人聚在一座小木桥上，走过去一看，原来是一只鳄鱼慢悠悠地摆着尾巴在游泳。科普一下，一般来说，alligator 指的是淡水鳄，攻击性较小，crocodiles 是盐水鳄，相对攻击性较高。</p><p><img src="https://raw.githubusercontent.com/0x333333/hexo_img/master/IMG_9844.jpg" alt="Photo with alligator"></p><p>鳄鱼是身后那个小点点。。。</p><p>沿着小木桥往后走，我们还看到很多叫不上名字的水鸟，看到很多植物从水中长出来。经过几处沼泽地，看到黑乎乎的水鸟，一动不动地站在树梢，对过往的游客根本不予理睬，估计也在看落日吧。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9855.jpg" alt="The Anhinga Trail"></p><p>Anhinga Trail 是一个 loop，差不多走了十分钟又能绕回起点。就在我们刚刚经过的小木桥下，有人眼尖地发现，一只鳄鱼躲在桥下一动不动，一点也没有怕人的意思。</p><p><img src="https://raw.githubusercontent.com/0x333333/hexo_img/master/IMG_9860.jpg" alt="Alligator hidden under bridge"></p><p><img src="https://raw.githubusercontent.com/0x333333/hexo_img/master/IMG_9862.jpg" alt="Alligator hidden under bridge"></p><h3 id="野外骑行"><a href="#野外骑行" class="headerlink" title="野外骑行"></a>野外骑行</h3><p>这个项目是我们在 Visitor Center 关门前临时看到的，早上 9 点开始，ranger 会提供自行车和头盔，全长 5～10 miles（ranger会根据当天的天气状况调整路线），大概一个半小时。</p><p><img src="https://i.imgur.com/vOWN5HR.png" alt="Biking tour in Everglades National Park."></p><p>在行程刚刚开始的时候，ranger 给我们讲了讲大沼泽地国家公园的历史，提到了为什么现在保护沼泽地是如此重要。以前人们人工挖掘了运河为了饮水，结果导致这篇大沼泽地的生态出现破坏，再加上人为对珍稀动物的捕杀，导致很多动植物面临灭绝，当人们开始意识到时，便成立了这个国家公园，旨在保护这一片的自然生态。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_3228.jpg" alt="The ranger is telling the story of Everglades National Park."></p><p>刚刚进 trail，两边是高耸瘦长的 Long pine（中文翻译是孤柏树？），所以这条 trail 也叫 Long Pine Key Nature Trail。之前我们一直很关心骑行的海拔问题，太多上下坡可能会很累，ranger 笑笑，估计也就几个 inch 的坡，LOL。别小看这几个 inch 的差别，随着 trail 的深入，海拔下降后，两边的景色完全变了。由于海拔的下降（7 inches），沼泽地的积水增多，两边的 pine 被换成了较矮的 bush，水塘也开始变多。就是这么神奇，7个 inches 就能带来这么大的变化。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9879.jpg" alt="Long pine in Everglades National Park."></p><p>这一路上，天气也是变幻莫测，让人摸不着头脑，刚刚还晴空万里，一会儿又阴云密布，ranger 说，除非是 thunder storm，骑行还会继续。在骑行的过程中，不一会儿便会经过水塘，水清澈见底，推荐骑过去，当然推着车走过去也行，就是会湿的更多一些。</p><p>穿过一片 long pine 林，可以看到边缘有一些 long pine 特别的青葱。Ranger 解释说，这是因为每过几年，大家就会人为的点火烧林，因为风很大，林火可以很快的移动，把较矮的植物烧死，这样可以给一些刚刚发芽的 long pine 一定的阳光空间和充分的肥料，否则长期被 bush 侵占，小树永远长不出来，这也是一种生物上的侵占（invasion）。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9886.jpg" alt="Bike and long pine in Everglades National Park."></p><p>提到生物侵占，就不得不提到另一种植物，Brazilian Pepper（巴西辣椒？），1840年左右，南美人来 Florida 后，甚是怀念他们家乡的 Brazilian Pepper，红色的小果实装点后院，圣诞的时候非常好看。当初 Brazilian Pepper 只是少数人种在自家院子里，谁知 Brazilian Pepper 在 Florida 没有天敌，于是它们开始野蛮生长，所以现在大沼泽地国家公园里到处都能看到。别小看了 Brazilian Pepper，由于生命力旺盛，枝繁叶包，它们抢占了太多的阳光的土壤养分，导致当地的 bush 和 long pine 大面积的死亡，继而危害到很多鸟类的生存，破坏了当地的生态圈。</p><p><img src="https://bugwoodcloud.org/images/768x512/0002008.jpg" alt="Brazilian Pepper in Everglades National Park."></p><p>在大沼泽地，还有一类侵占是 Python，蟒。因为没有天敌，蟒蛇在这里也是野蛮生长，吃尽了当地的小动物，如松鼠、兔子，严重破坏了生态链。为了治理蟒蛇，ranger 会定期夜晚出来捕蛇。单纯的抓捕肯定是无济于事的，蟒蛇的数量太多了，逐个捕抓效率也很低。他们想了两种办法，一是抓成年公蟒蛇，在它们体内植入芯片，再放回去，这样通过追踪公蟒蛇，找到母蟒蛇，抓住以防它们继续产卵。另一种办法是抓住母蟒蛇，通过基因手段，使得产的卵全部为公蟒蛇，这样断绝了蟒蛇的繁衍。可惜，整个骑行过程中我们并没有看到，就不放图了。</p><p>在 trail 的两边，时不时我们可以看到这样的水塘，小心了，其实这是鳄鱼挖的水塘。Ranger 说鳄鱼找到一片空地，会成群结队地通过甩尾来挖土，挖出一个坑后等到下雨天，这些就变成水塘，鳄鱼就可以在里面嬉戏玩耍了。这团队协作能力，这智商，不愧是地球上最古老的爬行动物。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_3256.jpg" alt="Bush created by alligator in Everglades National Park."></p><p>不知不觉，我们已经骑到了最后一段路，这是一段铺好的柏油路，右手边有国家公园做基因研究的基地，还有 Nike Missile Base 导弹发射基地，冷战时期的产物。据 ranger 讲，驻扎在发射基地的士兵，为了要搬运导弹，有时候踩在沼泽里大半个身体都会陷进去。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9903.jpg" alt="Biking on paved road."></p><p>骑行结束，回到停车场，突然发现多了一位看车人，拍两张留念！</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9911.jpg" alt="Birds on Mustang."></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9913.jpg" alt="Birds on Mustang."></p><h3 id="其它景点"><a href="#其它景点" class="headerlink" title="其它景点"></a>其它景点</h3><p>离开 Long pine trail 后，我们又去了其它一些景点，Pa-Hay-Okee Lookout Tower，Flamingo Visitor Center，Eco Pond。之前 ranger 说，动物一般是早晨、傍晚或者大雨之后出没较多，因为当时恰好是中午，天气多云，所以一路也没看到多少小动物，除了在 Flamingo Visitor Center 看到了几只海牛 manatee。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_3270.jpg" alt="Flamingo Visitor Center." title="Flamingo Visitor Center"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9920.jpg" alt="Flamingo Visitor Center." title="Flamingo Visitor Center"></p><p>我们在 Visitor Center 吃了东西，差不多已经是下午两点，因为之前定了迈阿密的Jet boat tour @4pm，所以我们收拾收拾就准备走了，26号再回 Everglades 继续玩另一条分支，见<a href="/2019/12/26/everglades-2/">大沼泽地国家公园 Everglades National Park - 下篇</a>。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9922.jpg" alt="Convertable Mustang." title="Convertable Mustang"></p><p><strong><em>更多完整版佛罗里达自驾游攻略，请参考 <a href="/2019/12/31/florida/">干货满满，环佛罗里达州深度自驾游攻略</a>。</em></strong></p>]]></content>
    
    <summary type="html">
    
      佛罗里达行程第三段上篇：大沼泽地国家公园攻略，在大沼泽地中骑行，在 hiking trail 上看鳄鱼和水鸟。
    
    </summary>
    
    
      <category term="trip_2019_ye" scheme="http://zpjiang.me/tags/trip-2019-ye/"/>
    
  </entry>
  
  <entry>
    <title>狂风暴雨中的西礁岛 Key West - 下篇</title>
    <link href="http://zpjiang.me/2019/12/22/key-west-in-rain-2/"/>
    <id>http://zpjiang.me/2019/12/22/key-west-in-rain-2/</id>
    <published>2019-12-22T20:10:40.000Z</published>
    <updated>2021-05-21T05:52:47.916Z</updated>
    
    <content type="html"><![CDATA[<iframe width="560" height="315" src="https://www.youtube.com/embed/XT1px59QAoM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>接上篇 <a href="/2019/12/21/key-west-in-rain">狂风暴雨中的 Key West - 上篇</a>。</p><span id="more"></span><script>window.location = "https://blog.1pixel.cc/" + window.location.pathname;</script><h3 id="狂风暴雨依旧"><a href="#狂风暴雨依旧" class="headerlink" title="狂风暴雨依旧"></a>狂风暴雨依旧</h3><p>大雨依旧倾盆，酒店吃早饭的地方都被狂风吹得漏雨。吃完早饭回到房间，老婆在一旁不停刷着天气预报，想到一天都要待在这逼仄的小屋子里心中就不免有些郁闷。我们网上搜了搜，决定还是冒雨出去逛逛，Tripadvisor 上有几家还不错的画展小店和博物馆。</p><p>然而刚刚出门不久，我们就反悔了，虽说披着雨衣，狂风夹杂着雨水还是见缝就钻，不一会儿就落得全身湿透。街上人不多，直到慢慢靠近 Duval St，才零零星星看到一些游客，不少人不打伞，没有雨披，穿着运动鞋就走在水塘里，估计内心也是一万匹草泥马奔腾着吧。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9732.jpg" alt="Rainy day in Key West" title="Rainy day in Key West"></p><p>我们在 Duval 上找了家店 <a href="http://www.blackfinbistro.com/">Blackfin Bistro</a>，看了菜单发现略带法式，还有焗蜗牛。在外面走了那么久，浑身湿透，只想着尽快点些热的吃了暖暖身子。我要了份 Yellowfin Tuna Burger，grilled，medium rare。另外还要了份 Yellowtail taco（老婆最喜欢吃的鱼）和 Sautéed Calamari 鱿鱼圈，做法挺奇特的，鱿鱼微微炸过，放在融化的蒜蓉黄油中，至于口味么，我觉得一般般。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9738.jpg" alt="Yellowfin Tuna Burger."></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9739.jpg" alt="Yellowtail Taco."></p><h3 id="Butterfly-and-Nature-Conservatory"><a href="#Butterfly-and-Nature-Conservatory" class="headerlink" title="Butterfly and Nature Conservatory"></a>Butterfly and Nature Conservatory</h3><p>中文找了一圈，不少人叫这个地方<a href="https://cn.tripadvisor.com/Attraction_Review-g34345-d599396-Reviews-Key_West_Butterfly_and_Nature_Conservatory-Key_West_Florida_Keys_Florida.html">蝴蝶自然温室</a>，标题还是用英文原名吧。去这里主要是为了避雨，距离 Blackfin 不远，听说里面常温保持在 80+，我们就买票进去了。</p><p>这间温室不大，进去得经过两道门，打开第二扇门的时候还是着实吃了一惊，这么多的蝴蝶！</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9743.jpg" alt="Butterfly in the conservatory of Key West."></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9746.jpg" alt="Butterfly in the conservatory of Key West."></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9750.jpg" alt="Butterfly in the conservatory of Key West."></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9758.jpg" alt="Butterfly in the conservatory of Key West."></p><p>在出口附近，有一间蝶蛹培养室，脑海里突然想起破蛹成蝶这一词。工作人员把新生的蝴蝶拿到外面的温室，打趣地说，birthday today！</p><h3 id="闲逛"><a href="#闲逛" class="headerlink" title="闲逛"></a>闲逛</h3><p>出了蝴蝶温室，雨小了很多，我们沿着 Duval 大街往回走，一路上经过不少画展，或者说卖画的小店更合适。其中一家，我们进去后看到一副摄影作品（可惜没拍照），一个人站在一条巨大的 tuna 旁边，让我想起了老人与海，尽管画面中的那位看上去很年轻。我一直没太想明白，为什么很多人出海打鱼，会跟鱼合张影。店主看到我一直盯着那幅作品，跟我说那是她的儿子，脸上写满了自豪。我连忙说这幅画拍得真不错，接着我们又闲聊了几句，诸如我们从加州过来，店主喜爱摄影，这幅作品中的小孩现在在 Discover 频道工作，有自己的专栏。</p><p>沿着街一直走，恰好路过一号公路结束的地方（对，就是那个一路警察，限速奇葩的高速），特此拍照留念。至于这个 Mile 0 marker 的故事，可以参考 <a href="https://www.tripadvisor.com/Attraction_Review-g34345-d7595065-Reviews-US_1_Mile_Marker_0-Key_West_Florida_Keys_Florida.html">Tripadvisor</a>。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9767.jpg" alt="The mile 0 marker in Key West." title="Mile 0 Marker"></p><p>在前往海边的路上，经过了这家 <a href="https://cn.tripadvisor.com/Attraction_Review-g34345-d12605545-Reviews-Papa_s_Pilar_Rum_Distillery-Key_West_Florida_Keys_Florida.html">Papa’s Pilar Rum Distillery</a>，一家朗姆酒酿酒厂，Tripadvisor 上rating还不错，原本打算进去看看，可惜正好关门了。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_3202.jpg" alt="Outside of Papa’s Pilar Rum Distillery." title="Papa’s Pilar Rum Distillery"></p><p>记不清经过了多少酒吧，多少精致小店，雨停后，街上的游客开始熙熙攘攘，身边不时有说着各种语言的路人擦肩而过，我们对这鬼天气的抱怨也逐渐被抛在脑后。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9780.jpg" alt="Boat in Key West."></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9781.jpg" alt="Boat in Key West."></p><h3 id="Half-Shell-Raw-Bar"><a href="#Half-Shell-Raw-Bar" class="headerlink" title="Half Shell Raw Bar"></a>Half Shell Raw Bar</h3><p>不知不觉，我们已经走到了西礁岛闹市的另一头，一看时间，恰好是 Half Shell Raw Bar 的 happy hour！走了一下午，正好有些饿，这家店在 Tripadvisor 上小有名气，这会儿的生蚝，虾还有啤酒都是半价。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9785.jpg" alt="Inside the Half Shell Raw Bar." title="Inside the Half Shell Raw Bar"></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_3209.jpg" alt="Inside the Half Shell Raw Bar." title="Inside the Half Shell Raw Bar"></p><p>这几天学了一个新词，vibe，中文翻译过来是差不多是指氛围，这家店的 vibe 确实很不错，顾客很多，服务员妹子很热情。我们点了一打生蚝，一打啤酒蒸 clam (中文叫蛤蜊，国内各个地方叫法不一)，一碟虾。鉴于昨天喝太多，我心里对酒是有些抵触的，但看看这价格，还是没忍住，我老婆要了一杯 white wine，我要了一杯 bud light。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9787.jpg" alt="The steamed clam in Half Shell Raw Bar."></p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9790.jpg" alt="Oyster in Half Shell Raw Bar."></p><p>没多一会儿，这几盘就被我们一扫而光，逛街真是累啊，于是我们又要了一份啤酒蒸虾。</p><p><img src="https://raw.githubusercontent.com/0x333333/blog_img/master/z_IMG_9798.jpg" alt="The steamed shrimp in Half Shell Raw Bar."></p><p>酒足饭饱，吃完回旅店，天已全黑，前脚刚到，雨又开始下了。</p><p><strong><em>更多完整版佛罗里达自驾游攻略，请参考 <a href="/2019/12/31/florida/">干货满满，环佛罗里达州深度自驾游攻略</a>。</em></strong></p>]]></content>
    
    <summary type="html">
    
      佛罗里达行程第二段下篇攻略：西礁岛依旧是狂风暴雨，连在 Duval Street 逛街都变得很难，于是我们只好去几家展览和博物馆转转，顺带去了 Blackfin Bistro，Butterfly Conservatory，Mile 0 Marker 和 Half Shell Raw Bar，简称，逛吃逛吃。
    
    </summary>
    
    
      <category term="trip_2019_ye" scheme="http://zpjiang.me/tags/trip-2019-ye/"/>
    
  </entry>
  
</feed>
